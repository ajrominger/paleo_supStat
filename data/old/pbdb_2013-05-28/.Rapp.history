makePlots
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width,height=height)#
		par(mar=mar,mgp=mgp)#
	})#
}#
pbdb.ord.div <- with(ord.tbin.bias,pbdb.3t.pub(div,T3.stat,tbin.pub,ord,tbin,pbdb.time,min.pub=10,plotit=makePlot))
if(!exists("makePlot")) makePlot <- TRUE
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width,height=height)#
		par(mar=mar,mgp=mgp)#
	})#
}#
pbdb.ord.div <- with(ord.tbin.bias,pbdb.3t.pub(div,T3.stat,tbin.pub,ord,tbin,pbdb.time,min.pub=10,plotit=makePlot))
sstat plotting parameters#
plot.pars <- list(#
	# to plotting device#
	width <- 3.5,#
	height <- 3.5,#
	# to `par'#
	mar <- c(3.5,3.5,0,0) + 0.1,#
	mgp <- c(2,1,0)#
)
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width,height=height)#
		par(mar=mar,mgp=mgp)#
	})#
}#
pbdb.ord.div <- with(ord.tbin.bias,pbdb.3t.pub(div,T3.stat,tbin.pub,ord,tbin,pbdb.time,min.pub=10,plotit=makePlot))
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width*2,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time, scale(pub3t),type='l',col='red')#
		lines(time, scale(sqs))#
		lines(time, scale(raw), lty=2)#
		logPlot(my.ecdf(pub3t),type="l",log="xy")#
	})#
}
logPlot(my.ecdf(pub3t,complement=TRUE),type="l",log="xy")
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width*2,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time, scale(pub3t),type='l',col='red')#
		lines(time, scale(sqs))#
		lines(time, scale(raw), lty=2)#
		logPlot(my.ecdf(pub3t,complement=TRUE),type="l",log="xy")#
	})#
}
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width*2,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time, scale(pub3t),type='l',col='red')#
		lines(time, scale(sqs))#
		lines(time, scale(raw), lty=2)#
		logPlot(my.ecdf(scale(pub3t),complement=TRUE),type="l",log="xy")#
	})#
}
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width*2,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time, scale(pub3t),type='l',col='red')#
		lines(time, scale(sqs))#
		lines(time, scale(raw), lty=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy")#
	})#
}
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width*2,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time, scale(pub3t),type='l',col='red')#
		lines(time, scale(sqs))#
		lines(time, scale(raw), lty=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})#
}
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width*2,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time, scale(pub3t),type='l',col='red',ylim=c(-2,2))#
		lines(time, scale(sqs))#
		lines(time, scale(raw), lty=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})#
}
with(plot.pars, {#
		quartz(width=width*2,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time, scale(pub3t),type='l',col='red',y.lim=c(-2,2))#
		lines(time, scale(sqs))#
		lines(time, scale(raw), lty=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})
with(pbdb.div[2:48,], {#
		paleoPlot(time, scale(pub3t),type='l',col='red',y.lim=c(-2,2.5))#
		lines(time, scale(sqs))#
		lines(time, scale(raw), lty=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})
with(pbdb.div[2:48,], {#
		paleoPlot(time, scale(pub3t),type='l',col='red',y.lim=c(-2,3))#
		lines(time, scale(sqs))#
		lines(time, scale(raw), lty=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',y.lim=c(-2,3),ylab="Scaled diversity")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Fluctuations| summed across orders", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})
plot.pars <- list(#
	# to plotting device#
	width <- 3.5,#
	height <- 3.5,#
	# to `par'#
	mar <- c(3,3,0,0) + 0.1,#
	mgp <- c(2,1,0)#
)
with(plot.pars, {#
		quartz(width=width*2,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})
sstat plotting parameters#
plot.pars <- list(#
	# to plotting device#
	width <- 3.75,#
	height <- 3.75,#
	# to `par'#
	mar <- c(3,3,0,0) + 0.1,#
	mgp <- c(2,1,0)#
)
with(plot.pars, {#
		quartz(width=width*2,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})
with(plot.pars, {#
		quartz(width=width*2.1,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})#
}
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2])#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=c(0,0))#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
	})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=c(0,0))
}
)
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=c(-1,1))})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=c(-1,-1))})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=c(1,1))})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=c(1,-1))})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=c(1,-1))})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=c(1,-1))})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=c(1,-1))})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=c(1,-1))})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=c(1,-1))})
? mtext
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=1,padj=1)})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=2,padj=2)})
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width*2.1,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=2,padj=2)})#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
		mtext("B",side=3,at=par("usr")[2],adj=2,padj=2)})#
	})#
}
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width*2.1,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=2,padj=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
		mtext("B",side=3,at=par("usr")[2],adj=2,padj=2)})#
	})#
}
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width*2.1,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		mtext("A",side=3,at=par("usr")[2],adj=2,padj=2)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
		mtext("B",side=3,at=par("usr")[2],adj=2,padj=2)#
	})#
}
fig.label <- function(label,x,y,location=NULL,pos="in",adj=0.1,log="n",...) {#
	old.xpd <- par("xpd")#
	if(is.character(location)) {#
		usr <- par("usr")#
		if(length(grep("x",log)) > 0) usr[1:2] <- exp(usr[1:2])#
		if(length(grep("y",log)) > 0) usr[3:4] <- exp(usr[3:4])#
		xfact <- adj[1]*(usr[2] - usr[1])#
		if(length(adj)==2) {#
			yfact <- adj[2]*(usr[4] - usr[3])#
		} else {#
			yfact <- adj[1]*(usr[4] - usr[3])#
		}#
		if(pos=="in") {#
			yfact <- -yfact#
		} else if(pos=="out") {#
			xfact <- -xfact#
			par(xpd=NA)#
		} else {#
			cat("pos must be either `in' or `out'")#
		}#
		if(location=="topright") {#
			x <- usr[2] - xfact#
			y <- usr[4] + yfact#
		} else if(location=="topleft") {#
			x <- usr[1] + xfact#
			y <- usr[4] + yfact#
		} else if(location=="bottomright") {#
			x <- usr[2] - xfact#
			y <- usr[3] - yfact#
		} else if(location=="bottomleft") {#
			x <- usr[1] + xfact#
			y <- usr[3] - yfact#
		} else {#
			cat("location must be one of `topright', `topleft', `bottomright', `bottomleft'")#
		}#
	}#
	text(x,y,labels=label,...)#
	par(xpd=old.xpd)#
}
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		fig.label("A",location="topright")#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
		fig.label("B",location="topright")#
	})#
}
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		fig.label("A",location="topright")#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
		fig.label("B",location="topright")#
	})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		text(par("usr")[2],par("usr")[4],labels="A",adj=c(1,1))#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
		text(par("usr")[2],par("usr")[4],labels="B",adj=c(1,1))#
	})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		text(par("usr")[2],par("usr")[4],labels="A",adj=c(2,2))#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
		text(par("usr")[2],par("usr")[4],labels="B",adj=c(1,1))#
	})
par("usr")
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		text(par("usr")[2],par("usr")[4],labels="A",adj=c(2,2))#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
		text(10^par("usr")[2],10^par("usr")[4],labels="B",adj=c(1,1))#
	})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		text(par("usr")[2],par("usr")[4],labels="A",adj=c(2,2))#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
		text(10^par("usr")[2],10^par("usr")[4],labels="B",adj=c(2,2))#
	})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		text(par("usr")[2],par("usr")[4],labels="A",adj=c(2,2),cex=1.4)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
		text(10^par("usr")[2],10^par("usr")[4],labels="B",adj=c(2,2),cex=1.4)#
	})
with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		text(par("usr")[2],par("usr")[4],labels="A",adj=c(1.5,1.5),cex=1.4)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
		text(10^par("usr")[2],10^par("usr")[4],labels="B",adj=c(1.5,1.5),cex=1.4)#
	})
source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width*2.1,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	})#
#
	with(pbdb.div[2:48,], {#
		paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
				  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
		lines(time[-1], scale(diff(sqs)))#
		lines(time[-1], scale(diff(raw)), lty=2)#
		text(par("usr")[2],par("usr")[4],labels="A",adj=adj,cex=cex.txt)#
		logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
				xlab="|Scaled fluctuations|", ylab="Cumulative density")#
		lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
		lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
		text(10^par("usr")[2],10^par("usr")[4],labels="B",adj=adj,cex=cex.txt)#
	})
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width*2.1,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
#
		with(pbdb.div[2:48,], {#
			paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
					  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
			lines(time[-1], scale(diff(sqs)))#
			lines(time[-1], scale(diff(raw)), lty=2)#
			text(par("usr")[2],par("usr")[4],labels="A",adj=adj,cex=cex.txt)#
			logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
					xlab="|Scaled fluctuations|", ylab="Cumulative density")#
			lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
			lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
			text(10^par("usr")[2],10^par("usr")[4],labels="B",adj=adj,cex=cex.txt)#
		})#
	})#
}
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width*2.1,height=height)#
		par(mar=mar, mgp=mgp, mfrow=c(1,2))#
#
		with(pbdb.div[2:48,], {#
			paleoPlot(time[-1], scale(diff(pub3t)),type='l',col='red',#
					  y.lim=c(-3,3),ylab="Scaled diversity fluctuations")#
			lines(time[-1], scale(diff(sqs)))#
			lines(time[-1], scale(diff(raw)), lty=2)#
			text(par("usr")[2],par("usr")[4],labels="A",adj=adj,cex=cex.txt)#
			logPlot(my.ecdf(abs(scale(pub3t)),complement=TRUE),type="l",log="xy",col="red",#
					xlab="|Scaled fluctuations|", ylab="Cumulative density")#
			lines(my.ecdf(abs(scale(sqs)),complement=TRUE))#
			lines(my.ecdf(abs(scale(raw)),complement=TRUE),lty=2)#
			text(10^par("usr")[2],10^par("usr")[4],labels="B",adj=adj,cex=cex.txt)#
		})#
	})#
}
if(makePlot) {#
	source('~/Desktop/Research/paleo_supStat/code/sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width,height=height)#
		par(mar=mar,mgp=mgp)#
	})#
}#
pbdb.ord.div <- with(ord.tbin.bias,#
	pbdb.3t.pub(div,T3.stat,tbin.pub,ord,tbin,pbdb.time,min.pub=10,plotit=makePlot)#
)
setwd('~/Desktop/Research/paleo_supStat/pbdb/pbdb_3Tpub')
rm(plot.pars)
source('../../code/sstat_plotting_par.R')
exists("pbdb.sstat.ord.cor")
setwd('~/Desktop/Research/paleo_supStat/pbdb/pbdb_3Tpub')#
source('../../code/sstat_plotting_par.R')#
#
with(plot.pars, {#
	quartz(width=width*2.1,height=height)#
	par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	source('pbdb_3T_pub_lik_v2.R')#
	text(par("usr")[2],par("usr")[4],labels="A",adj=adj,cex=cex.txt)#
})
rm(pbdb.sstat.ord.cor)
setwd('~/Desktop/Research/paleo_supStat/pbdb/pbdb_3Tpub')#
source('../../code/sstat_plotting_par.R')
with(plot.pars, {#
	quartz(width=width*2.1,height=height)#
	par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	source('pbdb_3T_pub_lik_v2.R')#
	text(par("usr")[2],par("usr")[4],labels="A",adj=adj,cex=cex.txt)#
})
with(plot.pars, {#
	quartz(width=width*2.1,height=height)#
	par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
})
with(plot.pars, {#
	quartz(width=width*2.1,height=height)#
	par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	browser()#
	source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
})
source('pbdb_3T_pub_lik_v2.R')
text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)
ls()
plot(pbdb.sstat.cls.cor)
pbdb.sstat.cls.cor <- sstat.comp(pbdb.cls.flux,minN=10,plotit=makePlot)
source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	plot(pbdb.sstat.cls.cor)
text(10^par("usr")[2], 10^par("usr")[4], labels="B", adj=adj, cex=cex.txt)
source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- par('usr')[3:4]
ylim
plot(pbdb.sstat.cls.cor,add.legend=FALSE,ylim=ylim,yaxs='i')
plot.sstat
range(NULL)
range(numeric())
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,y.lim,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	if(missing("y.lim")) y.lim <- c(ecdf.all[,2],ecdf.sub[,2])#
	logPlot(ecdf.all,log="xy",col="gray",pch=16,#
			# type="S",lwd=2,#
			# min of all could be 0, so make smart x-limits to avoid log(0)#
			xlim=c(ifelse(min(ecdf.all[,1])==0,min(ecdf.sub[,1]),min(ecdf.all[,1],ecdf.sub[,1])),max(ecdf.all[,1],ecdf.sub[,1])),#
			ylim=range(y.lim),#
			...)#
	points(ecdf.sub,#type="S",lwd=2#
	)#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,lwd=2,add=TRUE)#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,lwd=2,add=TRUE)#
	}#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- c(16,1,1)#
		# pt.lwd <- c(0,0,0)#
		# pt.cex <- c(0,0,0)#
		# lwd <- c(2,2,1)#
		pt.lwd <- c(1,1,0)#
		pt.cex <- c(1,1,0)#
		lwd <- c(0,0,2)#
		if("panel.first" %in% names(list(...))) {#
			leg <- c(leg,"Superstatistics likelihood CI")#
			col <- c(col,hsv(alpha=0.2))#
			pt.lwd <- c(pt.lwd,1)#
			pt.cex <- c(pt.cex,2)#
			lwd <- c(lwd,0)#
			pch <- c(pch,15)#
		}#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			pt.cex <- c(pt.cex,0)#
			lwd <- c(lwd,2)#
		}#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,pt.cex=pt.cex,lwd=lwd,bty="n")#
	}#
}
plot(pbdb.sstat.cls.cor,add.legend=FALSE,y.lim=ylim,yaxs='i')
with(plot.pars, {#
	quartz(width=width*2.1,height=height)#
	par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	browser()#
	source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- 10^par('usr')[3:4]#
	plot(pbdb.sstat.cls.cor,add.legend=FALSE,y.lim=ylim,yaxs='i')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="B", adj=adj, cex=cex.txt)#
})
source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- 10^par('usr')[3:4]
plot(pbdb.sstat.cls.cor,add.legend=FALSE,y.lim=ylim,yaxs='i')
text(10^par("usr")[2], 10^par("usr")[4], labels="B", adj=adj, cex=cex.txt)
source("~/R_functions/logAxis.R")
Q
plot(1,yaxt='n')
par('yaxt')
bla <- list(x=1)
bla$yaxt
bla$yaxt=='n'
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,y.lim,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	if(missing("y.lim")) y.lim <- c(ecdf.all[,2],ecdf.sub[,2])#
	dots <- list(...)#
	plot(ecdf.all,log="xy",col="gray",pch=16,#
		 # min of all could be 0, so make smart x-limits to avoid log(0)#
		 xlim=c(ifelse(min(ecdf.all[,1])==0,min(ecdf.sub[,1]),min(ecdf.all[,1],ecdf.sub[,1])),max(ecdf.all[,1],ecdf.sub[,1])),#
		 ylim=range(y.lim),#
		 ...)#
	points(ecdf.sub)#
	if('xaxt' %in% names(dots)) {#
		if(dots$xaxt != 'n') logAxis(1)#
	} else {#
		logAxis(1)#
	}#
	if('yaxt' %in% names(dots)) {#
		if(dots$yaxt != 'n') logAxis(2)#
	} else {#
		logAxis(2)#
	}#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,lwd=2,add=TRUE)#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,lwd=2,add=TRUE)#
	}#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- c(16,1,1)#
		# pt.lwd <- c(0,0,0)#
		# pt.cex <- c(0,0,0)#
		# lwd <- c(2,2,1)#
		pt.lwd <- c(1,1,0)#
		pt.cex <- c(1,1,0)#
		lwd <- c(0,0,2)#
		if("panel.first" %in% names(list(...))) {#
			leg <- c(leg,"Superstatistics likelihood CI")#
			col <- c(col,hsv(alpha=0.2))#
			pt.lwd <- c(pt.lwd,1)#
			pt.cex <- c(pt.cex,2)#
			lwd <- c(lwd,0)#
			pch <- c(pch,15)#
		}#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			pt.cex <- c(pt.cex,0)#
			lwd <- c(lwd,2)#
		}#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,pt.cex=pt.cex,lwd=lwd,bty="n")#
	}#
}
with(plot.pars, {#
	quartz(width=width*2.1,height=height)#
	par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	browser()#
	source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- 10^par('usr')[3:4]#
	plot(pbdb.sstat.cls.cor,add.legend=FALSE,y.lim=ylim,yaxs='i',yaxt='n')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="B", adj=adj, cex=cex.txt)#
})
source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- 10^par('usr')[3:4]
source('pbdb_3T_pub_lik_v2.R')
setwd('~/Desktop/Research/paleo_supStat/pbdb/pbdb_3Tpub')#
source('../../code/sstat_plotting_par.R')
source('pbdb_3T_pub_lik_v2.R')
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,y.lim,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	if(missing("y.lim")) y.lim <- c(ecdf.all[,2],ecdf.sub[,2])#
	dots <- list(...)#
	browser()#
	plot(ecdf.all,log="xy",col="gray",pch=16,#
		 # min of all could be 0, so make smart x-limits to avoid log(0)#
		 xlim=c(ifelse(min(ecdf.all[,1])==0,min(ecdf.sub[,1]),min(ecdf.all[,1],ecdf.sub[,1])),max(ecdf.all[,1],ecdf.sub[,1])),#
		 ylim=range(y.lim),#
		 ...)#
	points(ecdf.sub)#
	if('xaxt' %in% names(dots)) {#
		if(dots$xaxt != 'n') logAxis(1)#
	} else {#
		logAxis(1)#
	}#
	if('yaxt' %in% names(dots)) {#
		if(dots$yaxt != 'n') logAxis(2)#
	} else {#
		logAxis(2)#
	}#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,lwd=2,add=TRUE)#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,lwd=2,add=TRUE)#
	}#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- c(16,1,1)#
		# pt.lwd <- c(0,0,0)#
		# pt.cex <- c(0,0,0)#
		# lwd <- c(2,2,1)#
		pt.lwd <- c(1,1,0)#
		pt.cex <- c(1,1,0)#
		lwd <- c(0,0,2)#
		if("panel.first" %in% names(list(...))) {#
			leg <- c(leg,"Superstatistics likelihood CI")#
			col <- c(col,hsv(alpha=0.2))#
			pt.lwd <- c(pt.lwd,1)#
			pt.cex <- c(pt.cex,2)#
			lwd <- c(lwd,0)#
			pch <- c(pch,15)#
		}#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			pt.cex <- c(pt.cex,0)#
			lwd <- c(lwd,2)#
		}#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,pt.cex=pt.cex,lwd=lwd,bty="n")#
	}#
}
Q
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,y.lim,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	if(missing("y.lim")) y.lim <- c(ecdf.all[,2],ecdf.sub[,2])#
	dots <- list(...)#
	browser()#
	plot(ecdf.all,log="xy",col="gray",pch=16,#
		 # min of all could be 0, so make smart x-limits to avoid log(0)#
		 xlim=c(ifelse(min(ecdf.all[,1])==0,min(ecdf.sub[,1]),min(ecdf.all[,1],ecdf.sub[,1])),max(ecdf.all[,1],ecdf.sub[,1])),#
		 ylim=range(y.lim),#
		 ...)#
	points(ecdf.sub)#
	if('xaxt' %in% names(dots)) {#
		if(dots$xaxt != 'n') logAxis(1)#
	} else {#
		logAxis(1)#
	}#
	if('yaxt' %in% names(dots)) {#
		if(dots$yaxt != 'n') logAxis(2)#
	} else {#
		logAxis(2)#
	}#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,lwd=2,add=TRUE)#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,lwd=2,add=TRUE)#
	}#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- c(16,1,1)#
		# pt.lwd <- c(0,0,0)#
		# pt.cex <- c(0,0,0)#
		# lwd <- c(2,2,1)#
		pt.lwd <- c(1,1,0)#
		pt.cex <- c(1,1,0)#
		lwd <- c(0,0,2)#
		if("panel.first" %in% names(list(...))) {#
			leg <- c(leg,"Superstatistics likelihood CI")#
			col <- c(col,hsv(alpha=0.2))#
			pt.lwd <- c(pt.lwd,1)#
			pt.cex <- c(pt.cex,2)#
			lwd <- c(lwd,0)#
			pch <- c(pch,15)#
		}#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			pt.cex <- c(pt.cex,0)#
			lwd <- c(lwd,2)#
		}#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,pt.cex=pt.cex,lwd=lwd,bty="n")#
	}#
}
setwd('~/Desktop/Research/paleo_supStat/pbdb/pbdb_3Tpub')#
source('../../code/sstat_plotting_par.R')#
#
with(plot.pars, {#
	quartz(width=width*2.1,height=height)#
	par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	# browser()#
	source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- 10^par('usr')[3:4]#
	plot(pbdb.sstat.cls.cor,add.legend=FALSE,y.lim=ylim,yaxs='i',yaxt='n')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="B", adj=adj, cex=cex.txt)#
})
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,y.lim,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	if(missing("y.lim")) y.lim <- c(ecdf.all[,2],ecdf.sub[,2])#
	browser()#
	dots <- list(...)#
	plot(ecdf.all,log="xy",col="gray",pch=16,#
		 # min of all could be 0, so make smart x-limits to avoid log(0)#
		 xlim=c(ifelse(min(ecdf.all[,1])==0,min(ecdf.sub[,1]),min(ecdf.all[,1],ecdf.sub[,1])),max(ecdf.all[,1],ecdf.sub[,1])),#
		 ylim=range(y.lim),#
		 ...)#
	points(ecdf.sub)#
	if('xaxt' %in% names(dots)) {#
		if(dots$xaxt != 'n') logAxis(1)#
	} else {#
		logAxis(1)#
	}#
	if('yaxt' %in% names(dots)) {#
		if(dots$yaxt != 'n') logAxis(2)#
	} else {#
		logAxis(2)#
	}#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,lwd=2,add=TRUE)#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,lwd=2,add=TRUE)#
	}#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- c(16,1,1)#
		# pt.lwd <- c(0,0,0)#
		# pt.cex <- c(0,0,0)#
		# lwd <- c(2,2,1)#
		pt.lwd <- c(1,1,0)#
		pt.cex <- c(1,1,0)#
		lwd <- c(0,0,2)#
		if("panel.first" %in% names(list(...))) {#
			leg <- c(leg,"Superstatistics likelihood CI")#
			col <- c(col,hsv(alpha=0.2))#
			pt.lwd <- c(pt.lwd,1)#
			pt.cex <- c(pt.cex,2)#
			lwd <- c(lwd,0)#
			pch <- c(pch,15)#
		}#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			pt.cex <- c(pt.cex,0)#
			lwd <- c(lwd,2)#
		}#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,pt.cex=pt.cex,lwd=lwd,bty="n")#
	}#
}
plot(pbdb.sstat.ord.cor,xlab="|Fluctuations|",ylab="Cumulative density",#
	 panel.first=mle.poly(pbdb.ord.mleCI,PPx.gam,col=hsv(alpha=0.2),border=NA))
dots <- list(...)
Q
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE, xaxt='s',yaxt='s', y.lim, ...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	if(missing("y.lim")) y.lim <- c(ecdf.all[,2],ecdf.sub[,2])#
	plot(ecdf.all,log="xy",col="gray",pch=16,#
		 # min of all could be 0, so make smart x-limits to avoid log(0)#
		 xlim=c(ifelse(min(ecdf.all[,1])==0,min(ecdf.sub[,1]),min(ecdf.all[,1],ecdf.sub[,1])),max(ecdf.all[,1],ecdf.sub[,1])),#
		 ylim=range(y.lim), xaxt=xaxt, yaxt=yaxt,#
		 ...)#
	points(ecdf.sub)#
	if(xaxt != 'n') logAxis(1)#
	if(yaxt != 'n') logAxis(2)#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,lwd=2,add=TRUE)#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,lwd=2,add=TRUE)#
	}#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- c(16,1,1)#
		# pt.lwd <- c(0,0,0)#
		# pt.cex <- c(0,0,0)#
		# lwd <- c(2,2,1)#
		pt.lwd <- c(1,1,0)#
		pt.cex <- c(1,1,0)#
		lwd <- c(0,0,2)#
		if("panel.first" %in% names(list(...))) {#
			leg <- c(leg,"Superstatistics likelihood CI")#
			col <- c(col,hsv(alpha=0.2))#
			pt.lwd <- c(pt.lwd,1)#
			pt.cex <- c(pt.cex,2)#
			lwd <- c(lwd,0)#
			pch <- c(pch,15)#
		}#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			pt.cex <- c(pt.cex,0)#
			lwd <- c(lwd,2)#
		}#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,pt.cex=pt.cex,lwd=lwd,bty="n")#
	}#
}
plot(pbdb.sstat.ord.cor,xlab="|Fluctuations|",ylab="Cumulative density",#
	 panel.first=mle.poly(pbdb.ord.mleCI,PPx.gam,col=hsv(alpha=0.2),border=NA))
setwd('~/Desktop/Research/paleo_supStat/pbdb/pbdb_3Tpub')#
source('../../code/sstat_plotting_par.R')#
#
with(plot.pars, {#
	quartz(width=width*2.1,height=height)#
	par(mar=mar, mgp=mgp, mfrow=c(1,2))#
	# browser()#
	source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- 10^par('usr')[3:4]#
	plot(pbdb.sstat.cls.cor,add.legend=FALSE,y.lim=ylim,yaxs='i',yaxt='n')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="B", adj=adj, cex=cex.txt)#
})
with(plot.pars, {#
	# quartz(width=width*2.1,height=height)#
	par(oma=mar, mgp=mgp, mfrow=c(1,2), mar=rep(0,4))#
	# browser()#
	source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- 10^par('usr')[3:4]#
	plot(pbdb.sstat.cls.cor,add.legend=FALSE,y.lim=ylim,yaxs='i',yaxt='n')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="B", adj=adj, cex=cex.txt)#
})
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE, xaxt='s',yaxt='s', y.lim, ...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	if(missing("y.lim")) y.lim <- c(ecdf.all[,2],ecdf.sub[,2])#
	plot(ecdf.all,log="xy",col="gray",pch=16,#
		 # min of all could be 0, so make smart x-limits to avoid log(0)#
		 xlim=c(ifelse(min(ecdf.all[,1])==0,min(ecdf.sub[,1]),min(ecdf.all[,1],ecdf.sub[,1])),max(ecdf.all[,1],ecdf.sub[,1])),#
		 ylim=range(y.lim), xaxt='n', yaxt='n',#
		 ...)#
	points(ecdf.sub)#
	if(xaxt != 'n') logAxis(1)#
	if(yaxt != 'n') logAxis(2)#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,lwd=2,add=TRUE)#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,lwd=2,add=TRUE)#
	}#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- c(16,1,1)#
		# pt.lwd <- c(0,0,0)#
		# pt.cex <- c(0,0,0)#
		# lwd <- c(2,2,1)#
		pt.lwd <- c(1,1,0)#
		pt.cex <- c(1,1,0)#
		lwd <- c(0,0,2)#
		if("panel.first" %in% names(list(...))) {#
			leg <- c(leg,"Superstatistics likelihood CI")#
			col <- c(col,hsv(alpha=0.2))#
			pt.lwd <- c(pt.lwd,1)#
			pt.cex <- c(pt.cex,2)#
			lwd <- c(lwd,0)#
			pch <- c(pch,15)#
		}#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			pt.cex <- c(pt.cex,0)#
			lwd <- c(lwd,2)#
		}#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,pt.cex=pt.cex,lwd=lwd,bty="n")#
	}#
}
with(plot.pars, {#
	# quartz(width=width*2.1,height=height)#
	par(oma=mar, mgp=mgp, mfrow=c(1,2), mar=rep(0,4))#
	# browser()#
	source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- 10^par('usr')[3:4]#
	plot(pbdb.sstat.cls.cor,add.legend=FALSE,y.lim=ylim,yaxs='i',yaxt='n')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="B", adj=adj, cex=cex.txt)#
})
with(plot.pars, {#
	# quartz(width=width*2.1,height=height)#
	par(oma=mar, mgp=mgp, mfrow=c(1,2), mar=c(0,0,0,0.5))#
	# browser()#
	source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- 10^par('usr')[3:4]#
	par(mar=c(0,0.5,0,0))#
	plot(pbdb.sstat.cls.cor,add.legend=FALSE,y.lim=ylim,yaxs='i',yaxt='n')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="B", adj=adj, cex=cex.txt)#
})
mtext("Cumulative density",side=2,outer=TRUE)
mtext("Cumulative density",side=2,line=2,outer=TRUE)
mtext("|Fluctuations|",side=1,line=2,outer=TRUE)
with(plot.pars, {#
	# quartz(width=width*2.1,height=height)#
	par(oma=mar, mgp=mgp, mfrow=c(1,2), mar=c(0,0,0,0.5))#
	# browser()#
	source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- 10^par('usr')[3:4]#
	par(mar=c(0,0.5,0,0))#
	plot(pbdb.sstat.cls.cor,add.legend=FALSE,y.lim=ylim,yaxs='i',yaxt='n')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="B", adj=adj, cex=cex.txt)#
	mtext("Cumulative density",side=2,line=2,outer=TRUE)#
	mtext("|Fluctuations|",side=1,line=2,outer=TRUE)#
})
pbdb.cls.mleCI <- boot.mle.sstat(pbdb.sstat.cls.cor,B=1000,use.all=FALSE)
plot(pbdb.sstat.cls.cor,xlab="|Fluctuations|",ylab="Cumulative density",#
	 panel.first=mle.poly(pbdb.cls.mleCI,PPx.gam,col=hsv(alpha=0.2),border=NA))
oldwd <- setwd('~/Desktop/Research/paleo_supStat/pbdb/pbdb_3Tpub')#
source('../../code/sstat_plotting_par.R')#
#
with(plot.pars, {#
	quartz(width=width*2.1,height=height)#
	par(oma=mar, mgp=mgp, mfrow=c(1,2), mar=c(0,0,0,0.5))#
	# browser()#
	source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- 10^par('usr')[3:4]#
	par(mar=c(0,0.5,0,0))#
	plot(pbdb.sstat.cls.cor,add.legend=FALSE,y.lim=ylim,yaxs='i',yaxt='n')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="B", adj=adj, cex=cex.txt)#
	mtext("Cumulative density",side=2,line=2,outer=TRUE)#
	mtext("|Fluctuations|",side=1,line=2,outer=TRUE)#
})#
#
setwd(oldwd)
pbdb.ord.mleCI
boot.mle.sstat <- function(x,B=1000,use.all=TRUE) {#
	if(use.all) {#
		these.dat <- x$Px.raw#
	} else {#
		these.dat <- x$Px.sub#
	}#
	boots <- replicate(B,#
				{#
					sub.dat <- sapply(these.dat,sample,size=1)#
					this.mle <- try(optim(c(0.55,0.17),sstat.lik,method="BFGS",hessian=TRUE,dat=sub.dat),silent=TRUE)#
					if(class(this.mle) != "try-error") {#
						if(this.mle$convergence != 0) {#
							out <- rep(NA,2)#
						} else {#
							out <- this.mle$par#
						}#
					} else {#
						out <- rep(NA,2)#
					}#
					out#
				})#
	sstat.out <- rbind(quantile(boots[1,],c(0.025,0.975),na.rm=TRUE),quantile(boots[2,],c(0.025,0.975),na.rm=TRUE))#
	rownames(sstat.out) <- c("shape","rate")#
	norm.boots <- replicate(B, {#
		sub.dat <- sapply(these.dat,sample,size=1)#
		c(mean(sub.dat),sd(sub.dat))#
	})#
	norm.out <- rbind(quantile(norm.boots[1,],c(0.025,0.975),na.rm=TRUE),quantile(norm.boots[2,],c(0.025,0.975),na.rm=TRUE))#
	rownames(norm.out) <- c("mean","sd")#
	return(list(sstat=sstat.out, norm=norm.out))#
}
pbdb.ord.mleCI <- boot.mle.sstat(pbdb.sstat.ord.cor,B=1000,use.all=FALSE)
pbdb.ord.mleCI
boot.mle.sstat <- function(x,B=1000,use.all=TRUE) {#
	if(use.all) {#
		these.dat <- x$Px.raw#
	} else {#
		these.dat <- x$Px.sub#
	}#
	browser()#
	boots <- replicate(B,#
				{#
					sub.dat <- sapply(these.dat,sample,size=1)#
					this.mle <- try(optim(c(0.55,0.17),sstat.lik,method="BFGS",hessian=TRUE,dat=sub.dat),silent=TRUE)#
					if(class(this.mle) != "try-error") {#
						if(this.mle$convergence != 0) {#
							out <- rep(NA,2)#
						} else {#
							out <- this.mle$par#
						}#
					} else {#
						out <- rep(NA,2)#
					}#
					out#
				})#
	sstat.out <- rbind(quantile(boots[1,],c(0.025,0.975),na.rm=TRUE),quantile(boots[2,],c(0.025,0.975),na.rm=TRUE))#
	rownames(sstat.out) <- c("shape","rate")#
	norm.boots <- replicate(B, {#
		sub.dat <- sapply(these.dat,sample,size=1)#
		sd(sub.dat)#
	})#
	norm.out <- rbind(0,quantile(norm.boots,c(0.025,0.975),na.rm=TRUE))#
	rownames(norm.out) <- c("mean","sd")#
	return(list(sstat=sstat.out, norm=norm.out))#
}
pbdb.ord.mleCI <- boot.mle.sstat(pbdb.sstat.ord.cor,B=1000,use.all=FALSE)
norm.boots <- replicate(B, {#
		sub.dat <- sapply(these.dat,sample,size=1)#
		sd(sub.dat)#
	})
norm.boots
norm.out <- rbind(0,quantile(norm.boots,c(0.025,0.975),na.rm=TRUE))
norm.out
rownames(norm.out) <- c("mean","sd")
norm.out
Q
boot.mle.sstat <- function(x,B=1000,use.all=TRUE) {#
	if(use.all) {#
		these.dat <- x$Px.raw#
	} else {#
		these.dat <- x$Px.sub#
	}#
	browser()#
	boots <- replicate(B,#
				{#
					sub.dat <- sapply(these.dat,sample,size=1)#
					this.mle <- try(optim(c(0.55,0.17),sstat.lik,method="BFGS",hessian=TRUE,dat=sub.dat),silent=TRUE)#
					if(class(this.mle) != "try-error") {#
						if(this.mle$convergence != 0) {#
							out <- rep(NA,2)#
						} else {#
							out <- this.mle$par#
						}#
					} else {#
						out <- rep(NA,2)#
					}#
					out#
				})#
	sstat.out <- rbind(quantile(boots[1,],c(0.025,0.975),na.rm=TRUE),quantile(boots[2,],c(0.025,0.975),na.rm=TRUE))#
	rownames(sstat.out) <- c("shape","rate")#
	norm.boots <- replicate(B, {#
		sub.dat <- sapply(these.dat,sample,size=1)#
		sd(sub.dat)#
	})#
	norm.out <- rbind(0,quantile(norm.boots,c(0.025,0.975),na.rm=TRUE))#
	rownames(norm.out) <- c("mean","sd")#
	return(list(sstat=sstat.out, norm=norm.out))#
}
pbdb.ord.mleCI <- boot.mle.sstat(pbdb.sstat.ord.cor,B=1000,use.all=FALSE)
boot.mle.sstat <- function(x,B=1000,use.all=TRUE) {#
	if(use.all) {#
		these.dat <- x$Px.raw#
	} else {#
		these.dat <- x$Px.sub#
	}#
	boots <- replicate(B,#
				{#
					sub.dat <- sapply(these.dat,sample,size=1)#
					this.mle <- try(optim(c(0.55,0.17),sstat.lik,method="BFGS",hessian=TRUE,dat=sub.dat),silent=TRUE)#
					if(class(this.mle) != "try-error") {#
						if(this.mle$convergence != 0) {#
							out <- rep(NA,2)#
						} else {#
							out <- this.mle$par#
						}#
					} else {#
						out <- rep(NA,2)#
					}#
					out#
				})#
	sstat.out <- rbind(quantile(boots[1,],c(0.025,0.975),na.rm=TRUE),quantile(boots[2,],c(0.025,0.975),na.rm=TRUE))#
	rownames(sstat.out) <- c("shape","rate")#
	norm.boots <- replicate(B, {#
		sub.dat <- sapply(these.dat,sample,size=1)#
		sd(sub.dat)#
	})#
	norm.out <- rbind(0,quantile(norm.boots,c(0.025,0.975),na.rm=TRUE))#
	rownames(norm.out) <- c("mean","sd")#
	return(list(sstat=sstat.out, norm=norm.out))#
}
Q
boot.mle.sstat <- function(x,B=1000,use.all=TRUE) {#
	if(use.all) {#
		these.dat <- x$Px.raw#
	} else {#
		these.dat <- x$Px.sub#
	}#
	boots <- replicate(B,#
				{#
					sub.dat <- sapply(these.dat,sample,size=1)#
					this.mle <- try(optim(c(0.55,0.17),sstat.lik,method="BFGS",hessian=TRUE,dat=sub.dat),silent=TRUE)#
					if(class(this.mle) != "try-error") {#
						if(this.mle$convergence != 0) {#
							out <- rep(NA,2)#
						} else {#
							out <- this.mle$par#
						}#
					} else {#
						out <- rep(NA,2)#
					}#
					out#
				})#
	sstat.out <- rbind(quantile(boots[1,],c(0.025,0.975),na.rm=TRUE),quantile(boots[2,],c(0.025,0.975),na.rm=TRUE))#
	rownames(sstat.out) <- c("shape","rate")#
	norm.boots <- replicate(B, {#
		sub.dat <- sapply(these.dat,sample,size=1)#
		sd(sub.dat)#
	})#
	norm.out <- rbind(0,quantile(norm.boots,c(0.025,0.975),na.rm=TRUE))#
	rownames(norm.out) <- c("mean","sd")#
	return(list(sstat=sstat.out, norm=norm.out))#
}
pbdb.ord.mleCI <- boot.mle.sstat(pbdb.sstat.ord.cor,B=1000,use.all=FALSE)
pbdb.ord.mleCI
PPx.gam
pbdb.ord.mleCI
PPx.gam
plot(pbdb.sstat.ord.cor,xlab="|Fluctuations|",ylab="Cumulative density",#
	 panel.first={#
	 	mle.poly(pbdb.ord.mleCI$norm,function(x,mean,sd) {2*pnorm(x,mean,sd,lower.tail=FALSE)},#
	 			 col=hsv(0.6,alpha=0.2),border=NA)#
	 	mle.poly(pbdb.ord.mleCI$sstat,PPx.gam,#
	 			 col=hsv(alpha=0.2),border=NA)#
})
mle.poly <- function(ci.ma,fun,from=10^-2,to=10^2,...) {#
	these.x <- 10^c(seq(par("usr")[1],par("usr")[2],length=25),seq(par("usr")[2],par("usr")[1],length=25))#
	browser()#
	polygon(x=these.x,#
			y=c(fun(these.x[1:25],ci.ma[1,1],ci.ma[2,2]),fun(these.x[26:50],ci.ma[1,2],ci.ma[2,1])),#
			...)#
}
plot(pbdb.sstat.ord.cor,xlab="|Fluctuations|",ylab="Cumulative density",#
	 panel.first={#
	 	mle.poly(pbdb.ord.mleCI$norm,function(x,mean,sd) {2*pnorm(x,mean,sd,lower.tail=FALSE)},#
	 			 col=hsv(0.6,alpha=0.2),border=NA)#
	 	mle.poly(pbdb.ord.mleCI$sstat,PPx.gam,#
	 			 col=hsv(alpha=0.2),border=NA)#
})
Q
plot(pbdb.sstat.ord.cor)
plot(pbdb.sstat.ord.cor,add.legend=FALSE)
mle.poly <- function(ci.ma,fun,from=10^-2,to=10^2,...) {#
	these.x <- 10^c(seq(par("usr")[1],par("usr")[2],length=25),seq(par("usr")[2],par("usr")[1],length=25))#
	browser()#
	polygon(x=these.x,#
			y=c(fun(these.x[1:25],ci.ma[1,1],ci.ma[2,2]),fun(these.x[26:50],ci.ma[1,2],ci.ma[2,1])),#
			...)#
}
plot(pbdb.sstat.ord.cor,xlab="|Fluctuations|",ylab="Cumulative density",#
	 panel.first={#
	 	mle.poly(pbdb.ord.mleCI$norm,function(x,mean,sd) {2*pnorm(x,mean,sd,lower.tail=FALSE)},#
	 			 col=hsv(0.6,alpha=0.2),border=NA)#
	 	mle.poly(pbdb.ord.mleCI$sstat,PPx.gam,#
	 			 col=hsv(alpha=0.2),border=NA)#
})
these.x
c(fun(these.x[1:25],ci.ma[1,1],ci.ma[2,2])
)
c(fun(these.x[1:25],ci.ma[1,1],ci.ma[2,2]),fun(these.x[26:50],ci.ma[1,2],ci.ma[2,1]))
yy <- c(fun(these.x[1:25],ci.ma[1,1],ci.ma[2,2]),fun(these.x[26:50],ci.ma[1,2],ci.ma[2,1]))
points(these.x,yy)
ls()
x
plot(x)
par("usr")
10^par("usr")
these.x
points(these.x,rep(0.01,length(these.x)))
plot(sstat.pbdb.ord.cor)
plot(pbdb.sstat.ord.cor
)
plot(pbdb.sstat.ord.cor)
plot(pbdb.sstat.ord.cor,add.legend=FALSE)
points(these.x,rep(0.01,length(these.x)))
plot(pbdb.sstat.ord.cor,add.legend=FALSE)
points(these.x,yy)
points(these.x,yy,pch=16,col="blue",cex=0.5)
plot(pbdb.sstat.ord.cor,add.legend=FALSE)
points(these.x,yy,pch=16,col="blue",cex=0.5)
plot(pbdb.sstat.ord.cor,add.legend=FALSE,y.lim=range(yy))
yy
these.y[these.y < 10^par("usr")[3]] <- 10^par("usr")[3]
these.y <- c(fun(these.x[1:25],ci.ma[1,1],ci.ma[2,2]),fun(these.x[26:50],ci.ma[1,2],ci.ma[2,1]))
these.y[these.y < 10^par("usr")[3]] <- 10^par("usr")[3]
polygon(x=these.x,y=these.y,...)
plot(pbdb.sstat.ord.cor,add.legend=FALSE,y.lim=range(yy))
plot(pbdb.sstat.ord.cor,add.legend=FALSE,y.lim=range(these.y))
these.y
par("usr")
plot(pbdb.sstat.ord.cor,add.legend=FALSE)
par("usr")
these.y <- c(fun(these.x[1:25],ci.ma[1,1],ci.ma[2,2]),fun(these.x[26:50],ci.ma[1,2],ci.ma[2,1]))
these.y[these.y < 10^par("usr")[3]] <- 10^par("usr")[3]
polygon(x=these.x,y=these.y,...)
Q
mle.poly <- function(ci.ma,fun,from=10^-2,to=10^2,...) {#
	these.x <- 10^c(seq(par("usr")[1],par("usr")[2],length=25),seq(par("usr")[2],par("usr")[1],length=25))#
	these.y <- c(fun(these.x[1:25],ci.ma[1,1],ci.ma[2,2]),fun(these.x[26:50],ci.ma[1,2],ci.ma[2,1]))#
	these.y[these.y < 10^par("usr")[3]] <- 10^par("usr")[3]#
	polygon(x=these.x,y=these.y,...)#
}
plot(pbdb.sstat.ord.cor,xlab="|Fluctuations|",ylab="Cumulative density",#
	 panel.first={#
	 	mle.poly(pbdb.ord.mleCI$norm,function(x,mean,sd) {2*pnorm(x,mean,sd,lower.tail=FALSE)},#
	 			 col=hsv(0.6,alpha=0.2),border=NA)#
	 	mle.poly(pbdb.ord.mleCI$sstat,PPx.gam,#
	 			 col=hsv(alpha=0.2),border=NA)#
})
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE, xaxt='s',yaxt='s', y.lim, ...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	if(missing("y.lim")) y.lim <- c(ecdf.all[,2],ecdf.sub[,2])#
	plot(ecdf.all,log="xy",col="gray",pch=16,#
		 # min of all could be 0, so make smart x-limits to avoid log(0)#
		 xlim=c(ifelse(min(ecdf.all[,1])==0,min(ecdf.sub[,1]),min(ecdf.all[,1],ecdf.sub[,1])),max(ecdf.all[,1],ecdf.sub[,1])),#
		 ylim=range(y.lim), xaxt='n', yaxt='n',#
		 ...)#
	points(ecdf.sub)#
	if(xaxt != 'n') logAxis(1)#
	if(yaxt != 'n') logAxis(2)#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,lwd=2,add=TRUE)#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,lwd=2,add=TRUE)#
	}#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- c(16,1,1)#
		# pt.lwd <- c(0,0,0)#
		# pt.cex <- c(0,0,0)#
		# lwd <- c(2,2,1)#
		pt.lwd <- c(1,1,0)#
		pt.cex <- c(1,1,0)#
		lwd <- c(0,0,2)#
		if("panel.first" %in% names(list(...))) {#
			leg <- c(leg,"Superstatistics likelihood CI")#
			col <- c(col,hsv(alpha=0.2))#
			pt.lwd <- c(pt.lwd,1)#
			pt.cex <- c(pt.cex,2)#
			lwd <- c(lwd,0)#
			pch <- c(pch,15)#
		}#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			pt.cex <- c(pt.cex,0)#
			lwd <- c(lwd,2)#
			if("panel.first" %in% names(list(...))) {#
				leg <- c(leg,"Normal likelihood CI")#
				col <- c(col,hsv(0.6,alpha=0.2))#
				pt.lwd <- c(pt.lwd,1)#
				pt.cex <- c(pt.cex,2)#
				lwd <- c(lwd,0)#
				pch <- c(pch,15)#
			}#
		}#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,pt.cex=pt.cex,lwd=lwd,bty="n")#
	}#
}
plot(pbdb.sstat.ord.cor,xlab="|Fluctuations|",ylab="Cumulative density",#
	 panel.first={#
	 	mle.poly(pbdb.ord.mleCI$norm,function(x,mean,sd) {2*pnorm(x,mean,sd,lower.tail=FALSE)},#
	 			 col=hsv(0.6,alpha=0.2),border=NA)#
	 	mle.poly(pbdb.ord.mleCI$sstat,PPx.gam,#
	 			 col=hsv(alpha=0.2),border=NA)#
})
plot(1,pch=16)
plot(1,pch=15)
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE, xaxt='s',yaxt='s', y.lim, ...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	if(missing("y.lim")) y.lim <- c(ecdf.all[,2],ecdf.sub[,2])#
	plot(ecdf.all,log="xy",col="gray",pch=16,#
		 # min of all could be 0, so make smart x-limits to avoid log(0)#
		 xlim=c(ifelse(min(ecdf.all[,1])==0,min(ecdf.sub[,1]),min(ecdf.all[,1],ecdf.sub[,1])),max(ecdf.all[,1],ecdf.sub[,1])),#
		 ylim=range(y.lim), xaxt='n', yaxt='n',#
		 ...)#
	points(ecdf.sub)#
	if(xaxt != 'n') logAxis(1)#
	if(yaxt != 'n') logAxis(2)#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,lwd=2,add=TRUE)#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,lwd=2,add=TRUE)#
	}#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- c(16,1,1)#
		# pt.lwd <- c(0,0,0)#
		# pt.cex <- c(0,0,0)#
		# lwd <- c(2,2,1)#
		pt.lwd <- c(1,1,0)#
		pt.cex <- c(1,1,0)#
		lwd <- c(0,0,2)#
		if("panel.first" %in% names(list(...))) {#
			leg <- c(leg,"Superstatistics likelihood CI")#
			col <- c(col,hsv(alpha=0.2))#
			pt.lwd <- c(pt.lwd,1)#
			pt.cex <- c(pt.cex,2)#
			lwd <- c(lwd,0)#
			pch <- c(pch,15)#
		}#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			pt.cex <- c(pt.cex,0)#
			lwd <- c(lwd,2)#
			pch <- c(pch,1)#
			if("panel.first" %in% names(list(...))) {#
				leg <- c(leg,"Normal likelihood CI")#
				col <- c(col,hsv(0.6,alpha=0.2))#
				pt.lwd <- c(pt.lwd,1)#
				pt.cex <- c(pt.cex,2)#
				lwd <- c(lwd,0)#
				pch <- c(pch,15)#
			}#
		}#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,pt.cex=pt.cex,lwd=lwd,bty="n")#
	}#
}
plot(pbdb.sstat.ord.cor,xlab="|Fluctuations|",ylab="Cumulative density",#
	 panel.first={#
	 	mle.poly(pbdb.ord.mleCI$norm,function(x,mean,sd) {2*pnorm(x,mean,sd,lower.tail=FALSE)},#
	 			 col=hsv(0.6,alpha=0.2),border=NA)#
	 	mle.poly(pbdb.ord.mleCI$sstat,PPx.gam,#
	 			 col=hsv(alpha=0.2),border=NA)#
})
oldwd <- setwd('~/Desktop/Research/paleo_supStat/pbdb/pbdb_3Tpub')#
source('../../code/sstat_plotting_par.R')#
#
with(plot.pars, {#
	quartz(width=width*2.1,height=height)#
	par(oma=mar, mgp=mgp, mfrow=c(1,2), mar=c(0,0,0,0.5))#
	# browser()#
	source('pbdb_3T_pub_lik_v2.R')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="A", adj=adj, cex=cex.txt)#
	ylim <- 10^par('usr')[3:4]#
	par(mar=c(0,0.5,0,0))#
	plot(pbdb.sstat.cls.cor,add.legend=FALSE,y.lim=ylim,yaxs='i',yaxt='n')#
	text(10^par("usr")[2], 10^par("usr")[4], labels="B", adj=adj, cex=cex.txt)#
	mtext("Cumulative density",side=2,line=2,outer=TRUE)#
	mtext("|Fluctuations|",side=1,line=2,outer=TRUE)#
})#
#
setwd(oldwd)
!(exists("pbdb.ord.div") & exists("pbdb.gen.occ3TP") & exists("pbdb.sstat.ord.cor"))
exists("pbdb.ord.div")
exists("pbdb.gen.occ3TP")
pbdb.gen.occ3TP <- pbdb.gen.occ / pbdb.curv$Three.timer.sampling.stat[match(rownames(pbdb.gen.occ),pbdb.curv$Bin.name)]#
pbdb.gen.occ3TP <- pbdb.gen.occ3TP * exp(-predict(pbdb.pub.lm,newdata=pub.data))
exists("pbdb.gen.occ3TP")
!(exists("pbdb.ord.div") & exists("pbdb.gen.occ3TP") & exists("pbdb.sstat.ord.cor"))
ks.stat.pfun <- function(x,pfun,...) {#
	n <- length(x)#
	y <- pfun#
	x <- y(sort(x),...) - (0:(n - 1))/n#
	stat <- max(c(x, 1/n - x))#
	return(stat)#
}#
#
##	convenience function to split up time-bin by genus occurance matrix#
##	into order flux list#
genOcc2ord <- function(genOcc,genMap,ords) {#
	lapply(ords,function(x) {#
		raw.div <- rowSums(genOcc[,genMap==x,drop=FALSE])#
		raw.flux <- diff(c(0,raw.div))#
		return(raw.flux[raw.flux != 0])#
	})#
}
gen2ord <- as.character(with(pbdb.dat,occurrences.order_name[match(colnames(pbdb.gen.occ3TP),occurrences.genus_name)]))#
all.ord <- colnames(pbdb.ord.div)
plot(pbdb.sstat.ord.cor)
rm(list=ls())
oldwd <- setwd("~/Desktop/Research/paleo_supStat/pbdb/pbdb_3Tpub")
depends on .../make_pbdb_3Tpub.R#
if(!(exists("pbdb.ord.div") & exists("pbdb.gen.occ3TP") & exists("pbdb.sstat.ord.cor"))) {#
	makePlot <- FALSE#
	source("make_pbdb_3Tpub.R")#
}
functions for d-stat#
ks.stat.pfun <- function(x,pfun,...) {#
	n <- length(x)#
	y <- pfun#
	x <- y(sort(x),...) - (0:(n - 1))/n#
	stat <- max(c(x, 1/n - x))#
	return(stat)#
}#
#
##	convenience function to split up time-bin by genus occurance matrix#
##	into order flux list#
genOcc2ord <- function(genOcc,genMap,ords) {#
	lapply(ords,function(x) {#
		raw.div <- rowSums(genOcc[,genMap==x,drop=FALSE])#
		raw.flux <- diff(c(0,raw.div))#
		return(raw.flux[raw.flux != 0])#
	})#
}#
#
##	vector mapping genera (columns) in pbdb.gen.occ3TP to orders#
gen2ord <- as.character(with(pbdb.dat,occurrences.order_name[match(colnames(pbdb.gen.occ3TP),occurrences.genus_name)]))#
all.ord <- colnames(pbdb.ord.div)
nsim <- 2#
ordperm.dstat <- replicate(nsim,{#
	new.gen2ord <- sample(gen2ord)#
	new.flux <- genOcc2ord(pbdb.gen.occ3TP,new.gen2ord,all.ord)#
	this.sstat <- sstat.comp(new.flux,minN=15,plotit=FALSE)#
	this.PPx <- function(x) 0.5 + 0.5*this.sstat$PPx(x,FALSE)#
	ks.stat.pfun(unlist(this.sstat$raw.pk),this.PPx)#
})
ordperm.dstat
!(exists("pbdb.ord.div") & exists("pbdb.gen.occ3TP") & exists("pbdb.sstat.ord.cor"))
setwd('../')
setwd('../')
setwd('~/Desktop/Research/paleo_supStat/pbdb/pbdb_3Tpub')
setwd('../')
setwd('~/Desktop/Research/paleo_supStat/pbdb/pbdb_3Tpub')
source('../../sstat_plotting_par.R')
list.files('../../')
source('../../code/sstat_plotting_par.R')
load("ordperm_dstat(old).RData")
pbdb.ord.dstat <- with(pbdb.sstat.ord.cor,ks.stat.pfun(unlist(raw.pk),function(x) 0.5 + 0.5*PPx(x,FALSE)))#
pbdb.cls.dstat <- with(pbdb.sstat.cls.cor,ks.stat.pfun(unlist(raw.pk),function(x) 0.5 + 0.5*PPx(x,FALSE)))#
pbdb.phy.dstat <- NA	# STUB!!!#
#
##	plot it!#
source('../../code/sstat_plotting_par.R')#
#
with(plot.pars, {#
	quartz(width=width,height=height)#
	par(mar=mar,mgp=mgp)#
})
den.fill(ordperm.dstat,alpha=0.05,#
		 xlim={#
		 	x <- range(ordperm.dstat,pbdb.ord.dstat,pbdb.cls.dstat,pbdb.phy.dstat,na.rm=TRUE)#
		 	x + c(-1,1)*0.04*max(x)#
		 },#
		 col="gray20",xlab="D-statistic",main="")#
abline(v=c(pbdb.ord.dstat,pbdb.cls.dstat,pbdb.phy.dstat),#
	   # col=hsv(s=c(1,0.4,0.4)),#
	   lwd=3,lty=1:2)#
#
text(c(pbdb.ord.dstat,pbdb.cls.dstat,pbdb.phy.dstat),rep(par("usr")[4]*0.8,3),#
	 labels=c("Orders","Classes","Phyla"),srt=90,#
	 # col=hsv(s=c(1,0.3,0.4)),#
	 adj=c(0.5,1.5))
den_fill.R
den.fill
source("~/R_functions/den_fill.R")
den.fill(ordperm.dstat,alpha=0.05,#
		 xlim={#
		 	x <- range(ordperm.dstat,pbdb.ord.dstat,pbdb.cls.dstat,pbdb.phy.dstat,na.rm=TRUE)#
		 	x + c(-1,1)*0.04*max(x)#
		 },#
		 col="gray20",xlab="D-statistic",main="")
abline(v=c(pbdb.ord.dstat,pbdb.cls.dstat,pbdb.phy.dstat),#
	   # col=hsv(s=c(1,0.4,0.4)),#
	   lwd=3,lty=1:2)
text(c(pbdb.ord.dstat,pbdb.cls.dstat,pbdb.phy.dstat),rep(par("usr")[4]*0.8,3),#
	 labels=c("Orders","Classes","Phyla"),srt=90,#
	 # col=hsv(s=c(1,0.3,0.4)),#
	 adj=c(0.5,1.5))
pbdb.cls.dstat
pbdb.ord.dstat
oldwd <- setwd('~/Desktop/Research/paleo_supStat')
source('code/pbdb_3t_pub.R')#
#
##	load other needed funcitons#
source("~/R_functions/paleoPlot.R")#
source("~/R_functions/samp2site_spp.R")#
source("~/R_functions/logPlot.R")#
source("~/R_functions/my_ecdf.R")#
source("code/sstat_comp.R")#
source('code/sstat_methods.R')
setwd("data/pbdb_2013-05-28")
sys.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
x <- proc.time()
proc.time()
x
?proc.time()
