plot.ecdf.intrp <- function(X,dat,...) {#
	logPlot(dat,xlim=range(X[,1]),ylim=range(X[,-1],dat[,2],na.rm=TRUE),...)#
	for(i in 2:4) points(X[,c(1,i)],lty=ifelse(i %% 2 == 0, 2, 1),type="l")#
}#
#
##	function to compute tail exponent#
tsum.tail <- function(x,tail.n=20) {#
	x <- log(x[1:tail.n,])#
	expo <- lm(x[,2]~x[,1])$coeff[2]#
	#
	return(as.numeric(expo))#
}
sepk.sstat.ordQ <- apply(sapply(sepk.ord.divflux,function(x) x$flux[-recent.rm]),1,sum)
load("/Users/andrewrominger/Desktop/Research/paleo_supStat/sepk/sepk_sstat_tsum_obs.RData")
sepk.sstat.ordQ <- apply(sapply(sepk.ord.divflux,function(x) x$flux[-recent.rm]),1,sum)
Qx.real <- my.ecdf(abs(scale(sepk.sstat.ordQ,center=FALSE,scale=FALSE)),TRUE)
Qx.sim.intrp <- ecdf.intrp(tsum.sim,ymin=0.001)
Qx.sim.intrp[Qx.sim.intrp < min(Qx.real[,2])] <- NA#
intrp.stop <- min(which(apply(Qx.sim.intrp[,-1],1,function(x) all(is.na(x)))))-1#
if(intrp.stop < nrow(Qx.sim.intrp)) Qx.sim.intrp <- Qx.sim.intrp[1:intrp.stop,]
plot.ecdf.intrp(Qx.sim.intrp,#
				Qx.real,#
				log="x",xlab="|Global fluctuations|",ylab="Cummulative density",col="red")
sepk.ord.fluxXX <- sepk.ord.divflux[[1]][1:73,c(1,3)][order(abs(sepk.sstat.ordQ),decreasing=TRUE),][1:5,]#
sepk.ord.fluxXX[,2] <- sepk.sstat.ordQ[order(abs(sepk.sstat.ordQ),decreasing=TRUE)][1:5]#
sepk.ord.fluxXX
plot.ecdf.intrp(Qx.sim.intrp,#
				Qx.real,#
				log="xy",xlab="|Global fluctuations|",ylab="Cummulative density",col="red")
plot.ecdf.intrp <- function(X,dat,...) {#
	logPlot(dat,xlim=range(X[,1]),ylim=range(X[,-1],dat[,2],na.rm=TRUE),...)#
	for(i in 2:4) points(X[,c(1,i)],lty=ifelse(i %% 2 == 0, 2, 1),type="l",col="red")#
}
plot.ecdf.intrp(Qx.sim.intrp,#
				Qx.real,#
				log="xy",xlab="|Global fluctuations|",ylab="Cummulative density")
legend("bottomleft",legend=c("Observed","Superstatistics"),#
	   col=c("black","red"),pch=c(1,21),pt.bg=hsv(alpha=0.3))
legend("bottomleft",legend=c("Observed","Superstatistics"),#
	   col=c("black","red"),pch=c(1,22),pt.bg=hsv(alpha=0.3))
plot.ecdf.intrp(Qx.sim.intrp,Qx.real,log="xy",#
				xlab="|Global fluctuations|",ylab="Cummulative density")#
#
legend("bottomleft",legend=c("Observed","Superstatistics"),#
	   col=c("black","red"),pch=c(1,22),pt.bg=hsv(alpha=0.3),pt.cex=1:2,#
	   lty=1,lwd=0:1)
legend("bottomleft",legend=c("Observed","Superstatistics"),#
	   col=c("black","red"),pch=c(1,22),pt.bg=hsv(alpha=0.3),pt.cex=1:2,#
	   lty=1,lwd=0:1,pt.lwd=1)
plot.ecdf.intrp(Qx.sim.intrp,Qx.real,log="xy",#
				xlab="|Global fluctuations|",ylab="Cummulative density")#
#
legend("bottomleft",legend=c("Observed","Superstatistics"),#
	   col=c("black","red"),pch=c(1,22),pt.bg=hsv(alpha=0.3),pt.cex=1:2,#
	   lty=1,lwd=0:1,pt.lwd=1)
plot.ecdf.intrp(Qx.sim.intrp,Qx.real,log="xy",#
				xlab="|Global fluctuations|",ylab="Cummulative density")#
#
legend("bottomleft",legend=c("Observed","Superstatistics"),#
	   col=c("black","red"),pch=c(1,22),pt.bg=hsv(alpha=0.3),pt.cex=1:2,#
	   lty=1,lwd=0:1,pt.lwd=1:0)
plot.ecdf.intrp(Qx.sim.intrp,Qx.real,log="xy",#
				xlab="|Global fluctuations|",ylab="Cummulative density")#
#
legend("bottomleft",legend=c("Observed","Superstatistics"),#
	   col=c("black","red"),pch=c(1,22),pt.bg=hsv(alpha=0.3),pt.cex=1:2,#
	   lty=1,lwd=0:1,pt.lwd=1:0,bty="n")
quartz(width=4,height=4)#
par(mar=c(3.5,3.5,1,0.5)+0.1,mgp=c(2.5,1,0))#
source("/Users/andrewrominger/Desktop/Research/paleo_supStat/sepk/sepk_superstat_tsum_plotting.R")
dev.print(pdf,file=paste(save.dir,"figSupp_Qx_sim.pdf",sep="/"),width=4,height=4)
?
par
layout(matrix(1:3,nrow=1))#
plot(sepk.sstat.ord.d,sstat.par=list(col="red"),norm.par=list(col="blue"))#
plot(sepk.sstat.cls.d,sstat.par=list(col="red"),norm.par=list(col="blue"))#
plot(sepk.sstat.phy.d,sstat.par=list(col="red"),norm.par=list(col="blue"))
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,...) {#
	old.par <- par()#
	#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	#
	logPlot(ecdf.all,log="xy",col="gray",xlab="|Fluctuations|",ylab="Cumulative density",#
			xlim=range(ecdf.all[,1],ecdf.sub[,1]),ylim=range(ecdf.all[,2],ecdf.sub[,2]),#
			...)#
	points(ecdf.sub)#
	#
	options(warn=-1);par(sstat.par);options(warn=0)#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),add=TRUE)#
	#
	if(show.norm) {#
		options(warn=-1);par(norm.par);options(warn=0)#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),add=TRUE)#
	}#
	#
	options(warn=-1);par(old.par,no.readonly=TRUE);options(warn=0)#
	#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.par$col)#
		pch <- 1#
		pt.lwd <- c(1,1,0)#
		lwd <- c(0,0,sstat.par$lwd)#
		#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.par$col)#
			pt.lwd <- c(pt.lwd,0)#
			lwd <- c(lwd,norm.par$lwd)#
		}#
		#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,lwd=lwd,bty="n")#
	}#
	#
}
plot(sepk.sstat.ord.d,sstat.par=list(col="red"),norm.par=list(col="blue"))
plot(sepk.sstat.ord.d)
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	#
	logPlot(ecdf.all,log="xy",col="gray",xlab="|Fluctuations|",ylab="Cumulative density",#
			xlim=range(ecdf.all[,1],ecdf.sub[,1]),ylim=range(ecdf.all[,2],ecdf.sub[,2]),#
			...)#
	points(ecdf.sub)#
	#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,add=TRUE)#
	#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,add=TRUE)#
	}#
	#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- 1#
		pt.lwd <- c(1,1,0)#
		lwd <- c(0,0,1)#
		#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			lwd <- c(lwd,1)#
		}#
		#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,lwd=lwd,bty="n")#
	}#
	#
}
plot(sepk.sstat.ord.d)
quartz(width=4*3,height=4)#
layout(matrix(1:3,nrow=1))#
plot(sepk.sstat.ord.d)#
plot(sepk.sstat.cls.d,show.legend=FALSE)#
plot(sepk.sstat.phy.d,show.legend=FALSE)
quartz(width=8,height=8/3)#
layout(matrix(1:3,nrow=1))#
plot(sepk.sstat.ord.d)#
plot(sepk.sstat.cls.d,show.legend=FALSE)#
plot(sepk.sstat.phy.d,show.legend=FALSE)
layout(matrix(1:3,nrow=1))#
par(mar=c(3.5,3.5,1,0.5)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.ord.d)#
plot(sepk.sstat.cls.d,show.legend=FALSE)#
plot(sepk.sstat.phy.d,show.legend=FALSE)
par(mar=c(3.5,3,1,0)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.ord.d)#
#
par(mar=c(3.5,1.5,1,1.5)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.cls.d,show.legend=FALSE)#
#
par(mar=c(3.5,0,1,3)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.phy.d,show.legend=FALSE)
par(mar=c(3.5,3,1,0)+0.1,mgp=c(2.25,0.75,0))#
plot(sepk.sstat.ord.d)#
#
par(mar=c(3.5,1.75,1,1.25)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.cls.d,show.legend=FALSE)#
#
par(mar=c(3.5,0.25,1,2.75)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.phy.d,show.legend=FALSE)
par(mar=c(3.5,3,1,0)+0.1,mgp=c(2.25,0.75,0))#
plot(sepk.sstat.ord.d)#
#
par(mar=c(3.5,1.75,1,1.25)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.cls.d,show.legend=FALSE)#
#
par(mar=c(3.5,0.5,1,2.5)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.phy.d,show.legend=FALSE)
par(mar=c(3.5,3,1,0)+0.1,mgp=c(2.25,0.75,0))#
plot(sepk.sstat.ord.d)#
#
par(mar=c(3.5,1.8,1,1.2)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.cls.d,show.legend=FALSE)#
#
par(mar=c(3.5,0.6,1,2.4)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.phy.d,show.legend=FALSE)
par(mar=c(3.5,3,1,0)+0.1,mgp=c(2.25,0.75,0))#
plot(sepk.sstat.ord.d,xlab="")#
#
par(mar=c(3.5,1.8,1,1.2)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.cls.d,show.legend=FALSE)#
#
par(mar=c(3.5,0.6,1,2.4)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.phy.d,show.legend=FALSE,xlab="")
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	#
	logPlot(ecdf.all,log="xy",col="gray",#
			xlab=ifelse(exists(xlab),"|Fluctuations|",xlab),ylab=ifelse(exists(ylab),"Cumulative density",ylab),#
			xlim=range(ecdf.all[,1],ecdf.sub[,1]),ylim=range(ecdf.all[,2],ecdf.sub[,2]),#
			...)#
	points(ecdf.sub)#
	#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,add=TRUE)#
	#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,add=TRUE)#
	}#
	#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- 1#
		pt.lwd <- c(1,1,0)#
		lwd <- c(0,0,1)#
		#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			lwd <- c(lwd,1)#
		}#
		#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,lwd=lwd,bty="n")#
	}#
	#
}
par(mar=c(3.5,3,1,0)+0.1,mgp=c(2.25,0.75,0))#
plot(sepk.sstat.ord.d,xlab="")
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	print(missing(xlab))#
	logPlot(ecdf.all,log="xy",col="gray",#
			xlim=range(ecdf.all[,1],ecdf.sub[,1]),ylim=range(ecdf.all[,2],ecdf.sub[,2]),#
			...)#
	points(ecdf.sub)#
	#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,add=TRUE)#
	#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,add=TRUE)#
	}#
	#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- 1#
		pt.lwd <- c(1,1,0)#
		lwd <- c(0,0,1)#
		#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			lwd <- c(lwd,1)#
		}#
		#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,lwd=lwd,bty="n")#
	}#
	#
}
par(mar=c(3.5,3,1,0)+0.1,mgp=c(2.25,0.75,0))#
plot(sepk.sstat.ord.d,xlab="")
plot(sepk.sstat.ord.d)
sepk.sstat.ord.d
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	print(missing(xlab))#
	logPlot(ecdf.all,log="xy",col="gray",#
			xlim=range(ecdf.all[,1],ecdf.sub[,1]),ylim=range(ecdf.all[,2],ecdf.sub[,2]),#
			...)#
	points(ecdf.sub)#
	#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,add=TRUE)#
	#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,add=TRUE)#
	}#
	#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- 1#
		pt.lwd <- c(1,1,0)#
		lwd <- c(0,0,1)#
		#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			lwd <- c(lwd,1)#
		}#
		#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,lwd=lwd,bty="n")#
	}#
	#
}
plot.sstat(sepk.sstat.ord.d)
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	#
	logPlot(ecdf.all,log="xy",col="gray",#
			xlim=range(ecdf.all[,1],ecdf.sub[,1]),ylim=range(ecdf.all[,2],ecdf.sub[,2]),#
			...)#
	points(ecdf.sub)#
	#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,add=TRUE)#
	#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,add=TRUE)#
	}#
	#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- 1#
		pt.lwd <- c(1,1,0)#
		lwd <- c(0,0,1)#
		#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			lwd <- c(lwd,1)#
		}#
		#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,lwd=lwd,bty="n")#
	}#
	#
}
plot(sepk.sstat.ord.d)
quartz(width=8,height=8/3)#
layout(matrix(1:3,nrow=1))#
#
par(mar=c(3.5,3,1,0)+0.1,mgp=c(2.25,0.75,0))#
plot(sepk.sstat.ord.d,ylab="Cumulative density")#
#
par(mar=c(3.5,1.8,1,1.2)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.cls.d,xlab="|Global fluctuations|",ylab="",show.legend=FALSE)#
#
par(mar=c(3.5,0.6,1,2.4)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.phy.d,xlab="",ylab="",show.legend=FALSE)
par(mar=c(3.5,3,1,0)+0.1,mgp=c(2.25,0.75,0))#
plot(sepk.sstat.ord.d,ylab="Cumulative density")#
#
par(mar=c(3.5,1.8,1,1.2)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.cls.d,xlab="|Global fluctuations|",ylab="",add.legend=FALSE)#
#
par(mar=c(3.5,0.6,1,2.4)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.phy.d,xlab="",ylab="",add.legend=FALSE)
par(mar=c(3.5,3,1,0)+0.1,mgp=c(2.25,0.75,0),cex.lab=1.3)#
plot(sepk.sstat.ord.d,xlab="",ylab="Cumulative density")#
#
par(mar=c(3.5,1.8,1,1.2)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.cls.d,xlab="|Global fluctuations|",ylab="",add.legend=FALSE)#
#
par(mar=c(3.5,0.6,1,2.4)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.phy.d,xlab="",ylab="",add.legend=FALSE)
par(mar=c(3.5,3,1,0)+0.1,mgp=c(2.2,0.75,0),cex.lab=1.3)#
plot(sepk.sstat.ord.d,xlab="",ylab="Cumulative density")#
#
par(mar=c(3.5,1.8,1,1.2)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.cls.d,xlab="|Global fluctuations|",ylab="",add.legend=FALSE)#
#
par(mar=c(3.5,0.6,1,2.4)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.phy.d,xlab="",ylab="",add.legend=FALSE)
par(mar=c(3.5,3,1,0)+0.1,mgp=c(2,0.75,0),cex.lab=1.3)#
plot(sepk.sstat.ord.d,xlab="",ylab="Cumulative density")#
#
par(mar=c(3.5,1.8,1,1.2)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.cls.d,xlab="|Global fluctuations|",ylab="",add.legend=FALSE)#
#
par(mar=c(3.5,0.6,1,2.4)+0.1,mgp=c(2.5,1,0))#
plot(sepk.sstat.phy.d,xlab="",ylab="",add.legend=FALSE)
dev.print(pdf,file=paste(save.dir,"figSupp_sepk_P(x).pdf",sep="/"),width=8,height=8/3)
library(ape)
x <- rbdtree(1,0.8,Tmax=5000)
?rbdtree
source("/Users/andrewrominger/Desktop/Research/paleo_supStat/pbdb_read-in.R")
source("/Users/andrewrominger/Desktop/Research/paleo_supStat/pbdb/pbdb_read-in.R")
source("/Users/andrewrominger/Desktop/Research/paleo_supStat/code/sstat_comp.R")#
source("/Users/andrewrominger/Desktop/Research/paleo_supStat/code/sstat_methods.R")#
#
#
##	directory to save figs#
save.dir <- "/Users/andrewrominger/Desktop/Research/paleo_supStat/ms/current_version"
pbdb.ord.sstat <- sstat.comp(pbdb.ord.flux,minN=15,plotit=FALSE)
##	plotting#
quartz(width=4,height=4)#
par(mar=c(3.5,3.5,1,0.5)+0.1,mgp=c(2.5,1,0))#
plot(pbdb.ord.sstat)
pbdb.ord.sstat
plot(sepk.sstat.ord.d,xlab="",ylab="Cumulative density")
pbdb.ord.sstat
plot(pbdb.ord.sstat)
##	plot for sstat object#
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	#
	logPlot(ecdf.all,log="x",col="gray",#
			xlim=range(ecdf.all[,1],ecdf.sub[,1]),ylim=range(ecdf.all[,2],ecdf.sub[,2]),#
			...)#
	points(ecdf.sub)#
	#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,add=TRUE)#
	#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,add=TRUE)#
	}#
	#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- 1#
		pt.lwd <- c(1,1,0)#
		lwd <- c(0,0,1)#
		#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			lwd <- c(lwd,1)#
		}#
		#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,lwd=lwd,bty="n")#
	}#
	#
}
plot(pbdb.ord.sstat)
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	#
	logPlot(ecdf.all,log="y",col="gray",#
			xlim=range(ecdf.all[,1],ecdf.sub[,1]),ylim=range(ecdf.all[,2],ecdf.sub[,2]),#
			...)#
	points(ecdf.sub)#
	#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,add=TRUE)#
	#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,add=TRUE)#
	}#
	#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- 1#
		pt.lwd <- c(1,1,0)#
		lwd <- c(0,0,1)#
		#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			lwd <- c(lwd,1)#
		}#
		#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,lwd=lwd,bty="n")#
	}#
	#
}
plot(pbdb.ord.sstat)
unlist(pbdb.ord.sstat$Px.raw)
unlist(pbdb.ord.sstat$Px.sub)
abs(unlist(pbdb.ord.sstat$Px.sub))
min(abs(unlist(pbdb.ord.sstat$Px.sub)))
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	#
	logPlot(ecdf.all,log="xy",col="gray",#
			xlim=range(ecdf.sub[,1]),ylim=range(ecdf.all[,2],ecdf.sub[,2]),#
			...)#
	points(ecdf.sub)#
	#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,add=TRUE)#
	#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,add=TRUE)#
	}#
	#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- 1#
		pt.lwd <- c(1,1,0)#
		lwd <- c(0,0,1)#
		#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			lwd <- c(lwd,1)#
		}#
		#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,lwd=lwd,bty="n")#
	}#
	#
}
plot(pbdb.ord.sstat)
##	plot for sstat object#
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	#
	logPlot(ecdf.all,log="xy",col="gray",#
			xlim=ifelse(min(ecdf.all[,1])==0,range(ecdf.sub[,1]),range(ecdf.all[,1],ecdf.sub[,1])),#
			ylim=range(ecdf.all[,2],ecdf.sub[,2]),#
			...)#
	points(ecdf.sub)#
	#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,add=TRUE)#
	#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,add=TRUE)#
	}#
	#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- 1#
		pt.lwd <- c(1,1,0)#
		lwd <- c(0,0,1)#
		#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			lwd <- c(lwd,1)#
		}#
		#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,lwd=lwd,bty="n")#
	}#
	#
}
plot(pbdb.ord.sstat)
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	#
	print(ifelse(min(ecdf.all[,1])==0,range(ecdf.sub[,1]),range(ecdf.all[,1],ecdf.sub[,1])))#
	#
	logPlot(ecdf.all,log="xy",col="gray",#
			xlim=ifelse(min(ecdf.all[,1])==0,range(ecdf.sub[,1]),range(ecdf.all[,1],ecdf.sub[,1])),#
			ylim=range(ecdf.all[,2],ecdf.sub[,2]),#
			...)#
	points(ecdf.sub)#
	#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,add=TRUE)#
	#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,add=TRUE)#
	}#
	#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- 1#
		pt.lwd <- c(1,1,0)#
		lwd <- c(0,0,1)#
		#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			lwd <- c(lwd,1)#
		}#
		#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,lwd=lwd,bty="n")#
	}#
	#
}
plot(pbdb.ord.sstat)
ifelse(TRUE,1:3,4:10)
?ifelse
plot.sstat <- function(x,sstat.col="red",norm.col="blue",show.norm=TRUE,add.legend=TRUE,...) {#
	ecdf.all <- my.ecdf(abs(unlist(x$Px.raw)),complement=TRUE)#
	ecdf.sub <- my.ecdf(abs(unlist(x$Px.sub)),complement=TRUE)#
	#
	logPlot(ecdf.all,log="xy",col="gray",#
			# min of all could be 0, so make smart x-limits to aboid log(0)#
			xlim=c(ifelse(min(ecdf.all[,1])==0,min(ecdf.sub[,1]),min(ecdf.all[,1],ecdf.sub[,1])),max(ecdf.all[,1],ecdf.sub[,1])),#
			ylim=range(ecdf.all[,2],ecdf.sub[,2]),#
			...)#
	points(ecdf.sub)#
	#
	PPx <- x$PPx#
	curve(PPx(x,comp=TRUE),col=sstat.col,add=TRUE)#
	#
	if(show.norm) {#
		this.sd <- sd(unlist(x$Px.sub))#
		curve(2*pnorm(x,0,this.sd,lower.tail=FALSE),col=norm.col,add=TRUE)#
	}#
	#
	if(add.legend) {#
		leg <- c("All data",paste("Data (n >= ",x$minN,")",sep=""),"Superstatistics")#
		col <- c("gray","black",sstat.col)#
		pch <- 1#
		pt.lwd <- c(1,1,0)#
		lwd <- c(0,0,1)#
		#
		if(show.norm) {#
			leg <- c(leg,"ML normal")#
			col <- c(col,norm.col)#
			pt.lwd <- c(pt.lwd,0)#
			lwd <- c(lwd,1)#
		}#
		#
		legend("bottomleft",legend=leg,col=col,pch=pch,pt.lwd=pt.lwd,lwd=lwd,bty="n")#
	}#
	#
}
plot(pbdb.ord.sstat)
plot(pbdb.ord.sstat,xlab="|Fluctuations|",ylab="Cumulative density")
quartz(width=4,height=4)#
par(mar=c(3.5,3.5,1,0.5)+0.1,mgp=c(2.5,1,0))#
plot(pbdb.ord.sstat,xlab="|Fluctuations|",ylab="Cumulative density")
dev.print(pdf,file=paste(save.dir,"figSupp_Px_pbdbRaw.pdf",sep="/"),width=4,height=4)
dev.print(pdf,file=paste(save.dir,"figSupp_pbdbRaw_Px.pdf",sep="/"),width=4,height=4)
##	needed functions for plotting#
source("~/R_functions/paleoPlot.R")#
source("~/R_functions/my_ecdf.R")#
source("~/R_functions/logAxis.R")#
#
##	data and needed objects for comparison#
##	includes 3Tpub correction, SQS correction and raw data#
source("/Users/andrewrominger/Desktop/Research/paleo_supStat/pbdb/pbdb_3Tpub/make_pbdb_3Tpub.R")
##  the times used (drops Recent and Cambrian1)#
this.pbdb.time <- rev(sort(pbdb.time)[-1])[-1]#
#
##  SQS estimate of diversity#
samp.div <- rev(pbdb.samp$Mean.sampled.diversity[-1])[-1]#
#
##	raw estimate of diversity (i.e. no. genera in collections)#
raw.div <- tbin.bias$div[-nrow(tbin.bias)][-1]#
#
##  diversity corrected for 3 timer and publication bias#
corr.div <- apply(pbdb.ord.div,1,sum)#
#
##  plot three diversities through time#
sqs.col <- raw.col <- "black"#
our.col <- "red"#
sqs.lty <- our.lty <- 1#
raw.lty <- 2#
#
quartz(width=2*4.25,height=4)#
layout(matrix(1:2,nrow=1))#
par(mar=c(3,3,2,0.5)+0.1,mgp=c(2,0.75,0))#
#
paleoPlot(this.pbdb.time,scale(samp.div),#
		  ylab="Scaled diversity",col=sqs.col,lty=sqs.lty,type="l",yaxt="n")#
lines(this.pbdb.time,scale(raw.div),col=raw.col,lty=raw.lty)#
lines(this.pbdb.time,scale(corr.div),col=our.col)#
axis(2,at=-1:3)
##  Q(x) for three diversities#
plot(my.ecdf(abs(diff(scale(samp.div))),TRUE),col=sqs.col,#
	 xlab="|Fluctuations in scaled diversity|",ylab="Cumulative density",#
	 log="xy",xaxt="n",yaxt="n",main="",type="S",lwd=1)#
logAxis(1)#
logAxis(2)#
#
points(my.ecdf(abs(diff(scale(raw.div))),TRUE),lty=raw.lty,type="S",lwd=1)#
points(my.ecdf(abs(diff(scale(corr.div))),TRUE),col=our.col,type="S",lwd=1)#
#
legend(0.003,0.1,legend=c("Raw diversity","SQS diversity","3TPub diversity"),#
	   lty=c(raw.lty,sqs.lty,our.lty),col=c(raw.col,sqs.col,our.col),bty="n")
tbin.pub
paleoPlot(this.pbdb.time,tbin.pub[names(this.pbdb.time)])
layout(matrix(1:2,nrow=1))#
par(mar=c(3,3,2,0.5)+0.1,mgp=c(2,0.75,0))#
#
paleoPlot(this.pbdb.time,scale(samp.div),#
		  ylab="Scaled diversity",col=sqs.col,lty=sqs.lty,type="l",yaxt="n")#
lines(this.pbdb.time,scale(raw.div),col=raw.col,lty=raw.lty)#
lines(this.pbdb.time,scale(corr.div),col=our.col)#
axis(2,at=-1:3)#
#
#
##  Q(x) for three diversities#
plot(my.ecdf(abs(diff(scale(samp.div))),TRUE),col=sqs.col,#
	 xlab="|Fluctuations in scaled diversity|",ylab="Cumulative density",#
	 log="xy",xaxt="n",yaxt="n",main="",type="S",lwd=1)#
logAxis(1)#
logAxis(2)#
#
points(my.ecdf(abs(diff(scale(raw.div))),TRUE),lty=raw.lty,type="S",lwd=1)#
points(my.ecdf(abs(diff(scale(corr.div))),TRUE),col=our.col,type="S",lwd=1)#
#
legend(0.003,0.1,legend=c("Raw diversity","SQS diversity","3TPub diversity"),#
	   lty=c(raw.lty,sqs.lty,our.lty),col=c(raw.col,sqs.col,our.col),bty="n")
?mapply
x <- y <- list(1:4,5:30,12:15)
x
y
x
y
mapply(function(u,v) {u%*%v} u=x,v=y)
?mapply
mapply(function(u,v) {u%*%v} x,y)
mapply(function(u,v){u%*%v} x,y)
mapply(function(u,v) {}u%*%v}, x,y)
mapply(function(u,v) {u%*%v}, x,y)
mapply(function(u,v) {u%*%v}, u=x,v=y)
?vcv
vcv
?UseMethod
UseMethod("vcv")
char.sim
library(geiger)
library(giger)
library(gieger)
library(geiger)
install.packages("geiger")
library(geiger)
sim.char
?mvrnorm
mvrnorm
tre <- rbdtree(1,0.9)
tre
tre <- rbdtree(2,1.99)
tre
sim.mvn <- function(mu,Sigma,Z=NULL) {#
	n <- length(mu)#
	L <- t(chol(Sigma))	# chol returns upper tri by default...#
	#
	if(is.null(Z)) Z <- rnorm(n,0,1)	# allow Z to be arg so can indep change Sigma#
	#
	return(mu + L%*%Z)#
}
sim.mvn(rnorm(Ntip(tre)),vcv(tre))
bla <- rnorm(Ntip(tre))
bla
bla.sim <- sim.mvn(bla,vcv(tre))
plot(bla,bla.sim)
sim.mvn <- function(mu,Sigma) {#
	n <- length(mu)#
	L <- t(chol(Sigma))	# chol returns upper tri by default...#
	#
	Z <- rnorm(n,0,1)#
	#
	return(mu + L%*%Z)#
}#
#
tre <- rbdtree(2,1.99)#
#
bla <- rnorm(Ntip(tre))#
bla.sim <- sim.mvn(bla,vcv(tre))#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- sim.mvn(bla,vcv(tre))#
plot(bla,bla.sim)
library(mvtnorm)
?rmvnorm
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=0.1*vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=0.1*vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=0.1*vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=0.1*vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=0.1*vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=0.05*vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=0.05*vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=0.05*vcv(tre),method="chol")#
plot(bla,bla.sim)
bla <- rnorm(Ntip(tre))#
bla.sim <- rmvnorm(1,bla,sigma=0.05*vcv(tre),method="chol")#
plot(bla,bla.sim)
plot(bla,bla.sim);abline(0,1)
plot(tre)
bla.ace <- ace(bla.sim,tre)
bla.ace
bla.ace$ace
library(classInt)
cInt <- classIntervals(bla.ace$ace,24,style="fisher")
library(fields)
cPal <- tim.colors(24)
plot(cInt,cPal)
?classIntervals
these.col <- findColours(cInt,cPal)
plot(tre)#
nodelabels(pch=16,col=these.col)
plot(cInt,cPal)
plot(tre)
nodelabels(pch=16,col=these.col)
plot(tre,tip.label=FALSE)#
nodelabels(pch=16,col=these.col,cex=3)
plot(tre,show.tip.label=FALSE)
nodelabels(pch=16,col=these.col,cex=1.5)
bla.sim2 <- rmvnorm(1,sigma=vcv(tre))
bla.ace2 <- ace(bla.sim2,tre)
cInt <- classIntervals(bla.ace2$ace,24,style="fisher")#
cPal <- tim.colors(24)#
plot(cInt,cPal)#
these.col <- findColours(cInt,cPal)#
#
plot(tre,show.tip.label=FALSE)#
nodelabels(pch=16,col=these.col,cex=1.5)
library(mvtnorm)
x <- matrix(c(1,0.25,1,0.25),2,2)
x
solve(x)
x <- matrix(c(1,0.25,0.25,1),2,2)
x
solve(x)
x <- matrix(c(1,0.5,0.5,1),2,2)
solve(x)
x <- matrix(c(1,1,1,1),2,2)
solve(x)
x <- matrix(c(1,0.9,0.9,1),2,2)
x
solve(x)
var(rmvnorm(10,simga=vcv(bla)))
var(rmvnorm(10,sigma=vcv(bla)))
bla <- rtree(100)
var(rmvnorm(10,sigma=vcv(bla)))
var(rmvnorm(10,sigma=vcv(bla),method="chol"))
dim(rmvnorm(10,sigma=vcv(bla),method="chol"))
apply(rmvnorm(10,sigma=vcv(bla),method="chol"),1,var)
mean(apply(rmvnorm(20,sigma=vcv(bla),method="chol"),1,var))
mean(apply(rmvnorm(20,sigma=2*vcv(bla),method="chol"),1,var))
bla.sig <- vcv(bla)
diag(bla.sig)
bla.sig <- vcv(bla)#
bla.diag <- diag(bla.sig)#
bla.sig <- bla.sig*1#
diag(bla.sig) <- bla.diag#
#
mean(apply(rmvnorm(20,sigma=bla.sig,method="chol"),1,var))
bla.sig <- bla.sig*2#
diag(bla.sig) <- bla.diag#
#
mean(apply(rmvnorm(20,sigma=bla.sig,method="chol"),1,var))
library(MASS)#
source("~/R_functions/circ.R")#
set.seed(1)#
spp.rng <- kde2d(rnorm(100),rnorm(100),n=100)#
image(spp.rng);contour(spp.rng,add=TRUE)#
#
x <- contourLines(spp.rng)#
spp.rng <- x[[which(sapply(x,function(x) x$level) == 0.1)]][c("y","x")]#
#
names(spp.rng) <- c("x","y")#
spp.rng$y <- -1*spp.rng$y#
spp.rng <- data.frame(x=spp.rng$x,y=spp.rng$y)#
#
spp.rng <- 0.5*spp.rng#
spp.rng$x <- spp.rng$x - spp.rng$x[177] + 2^0.5/2#
spp.rng$y <- spp.rng$y - spp.rng$y[177] - 2^0.5/2
r1 <- 1#
r2 <- as.numeric(dist(rbind(c(0,0),spp.rng[80,])))#
r3 <- 3#
#
layout(matrix(1:4,2,2,byrow=TRUE))#
#
par(mar=rep(0.1,4))#
plot(0,0,xlim=c(-r3,r3),ylim=c(-r3,r3),asp=1,pch=3,axes=FALSE)#
polygon(circ(0,0,r2,50),col="gray80",border=NA)#
polygon(circ(0,0,r1,50),col="gray50",border=NA)#
#
polygon(spp.rng,col="steelblue2",border="steelblue4")#
polygon(circ(0,0,r1,50),lty=2)#
polygon(circ(0,0,r2,50),lty=2)#
polygon(circ(0,0,r3,80))
arrows(x0=0,y0=0,x1=r2,length=0.15)#
arrows(x0=0,y0=0,x1=2^-0.5,y1=2^-0.5,length=0.15)
plot(0,0,xlim=c(-r3,r3),ylim=c(-r3,r3),asp=1,pch=3,axes=FALSE)#
polygon(circ(0,0,r3,50),col="gray50",border=NA)#
polygon(circ(0,0,r2,50),col="gray80",border=NA)#
polygon(circ(0,0,r1,50),col="white",border=NA)#
#
polygon(spp.rng,col="steelblue2",border="steelblue4")#
polygon(circ(0,0,r1,50),lty=2)#
polygon(circ(0,0,r2,50),lty=2)#
polygon(circ(0,0,r3,80))#
#
arrows(x0=r3,y0=0,x1=r2,length=0.15)#
arrows(x0=r2*2^-0.5,y0=r2*2^-0.5,x1=2^-0.5,y1=2^-0.5,length=0.15)#
#
par(mar=c(5,4,2,3)+0.1,mgp=c(2.5,1,0),cex.lab=1.5,cex.axis=1.4)#
#
plot(c(0,1,3,4),c(0,0,1,1),type="s",xlab="Habitat degraded",ylab="",#
	 lwd=3,ylim=c(-0.1,1.1),axes=FALSE,frame.plot=TRUE)#
points(c(1,3,3),c(0,0,1),pch=c(16,1,16),cex=2)#
axis(1,at=c(1,3),labels=c(expression(italic(a)[1]),expression(italic(a)[2])))#
axis(2,at=0:1)#
mtext("Species lost",side=2,line=2,cex=1.5)#
#
plot(c(0,1,3,4),c(0,0,1,1),type="s",xlab="Habitat degraded",ylab="",#
	 lwd=3,ylim=c(-0.1,1.1),axes=FALSE,frame.plot=TRUE)#
points(c(1,3,3),c(0,0,1),pch=c(16,1,16),cex=2)#
axis(1,at=c(1,3),labels=c(expression(italic(a)[1]*"'"),expression(italic(a)[2]*"'")))#
axis(2,at=0:1)#
mtext("Species lost",side=2,line=2,cex=1.5)
library(spatstat)#
#
##	create spatial distrib of spp#
r.win <- 0.5#
kid.win <- owin(poly=circ(0,0,r.win,100))#
parents <- matrix(runif(600,-1,2),ncol=2)#
#
kids <- apply(parents,1,function(x)#
			{#
				nkid <- rgeom(1,0.01)#
				kid.ppp <- ppp(rnorm(nkid,x[1],0.5),rnorm(nkid,x[2],0.5),window=kid.win)#
				#
				return(as.ppp(kid.ppp))#
			})#
#
#
empty.tax <- which(sapply(kids, function(x) x$n)==0)#
#
kids <- kids[-empty.tax]#
nspp <- length(kids)#
#
kids.ma <- c()#
for(i in 1:nspp) kids.ma <- rbind(kids.ma,cbind(kids[[i]]$x,kids[[i]]$y,rep(i,length(kids[[i]]$x))))#
#
#
all.kids <- ppp(kids.ma[,1],kids.ma[,2],window=kid.win,marks=as.integer(kids.ma[,3]))#
#
plot(all.kids)
library(spatstat)
install.packages("mgcv")
install.packages("spatstat")
library(spatstat)
##	create spatial distrib of spp#
r.win <- 0.5#
kid.win <- owin(poly=circ(0,0,r.win,100))#
parents <- matrix(runif(600,-1,2),ncol=2)
kids <- apply(parents,1,function(x)#
			{#
				nkid <- rgeom(1,0.01)#
				kid.ppp <- ppp(rnorm(nkid,x[1],0.5),rnorm(nkid,x[2],0.5),window=kid.win)#
				#
				return(as.ppp(kid.ppp))#
			})
empty.tax <- which(sapply(kids, function(x) x$n)==0)#
#
kids <- kids[-empty.tax]#
nspp <- length(kids)#
#
kids.ma <- c()#
for(i in 1:nspp) kids.ma <- rbind(kids.ma,cbind(kids[[i]]$x,kids[[i]]$y,rep(i,length(kids[[i]]$x))))#
#
#
all.kids <- ppp(kids.ma[,1],kids.ma[,2],window=kid.win,marks=as.integer(kids.ma[,3]))
plot(all.kids)
init.pt <- runifpoint(100,win=kid.win)#
spp.dist <- t(crossdist(init.pt,all.kids))#
spp.dist <- lapply(split(as.data.frame(spp.dist),as.factor(all.kids$marks)),as.matrix)#
#
spp.frla <- sapply(spp.dist,function(x) apply(x,2,range))#
spp.frst <- t(spp.frla[seq(1,200,by=2),])#
spp.last <- t(spp.frla[seq(2,200,by=2),])#
#
spp.frst <- apply(spp.frst,2,sort)#
spp.last <- apply(spp.last,2,sort)
are.inOut.sar <- are.inOut.ear <- matrix(NA,nrow=nrow(spp.frst),ncol=ncol(spp.frst))#
for(i in 1:ncol(spp.frst)) {#
	are.inOut.sar[,i] <- dilated.areas(init.pt[i,],spp.frst[,i])#
	are.inOut.ear[,i] <- dilated.areas(init.pt[i,],spp.last[,i])#
}#
#
are.outIn.sar <- pi*r.win^2 - are.inOut.ear#
#
spp.accum.inOut <- matrix(1:nspp,nrow=nspp,ncol=100)#
spp.accum.outIn <- spp.accum.inOut[nspp:1,]#
#
plot(are.inOut.sar,spp.accum.inOut,log="xy",col=hsv(0.7,1,1,alpha=0.4),pch=16)#
points(are.outIn.sar,spp.accum.outIn,col=hsv(1.0,1,1,alpha=0.4),pch=16)#
points(are.inOut.ear,spp.accum.inOut,col=hsv(0,1,0,alpha=0.4),pch=16)#
#
legend("topleft",legend=c("in-to-out SAR","out-to-in SAR","in-to-out EAR"),#
	   col=hsv(h=c(0.7,1,0),v=c(1,1,0)),pch=16)
x.approx <- seq(min(are.inOut.sar[are.inOut.sar != 0],are.outIn.sar[are.outIn.sar != 0]),1,#
				by=mean(apply(are.inOut.sar,2, diff)))#
x.approx <- c(x.approx,1)#
#
#
#
sar.inOut.approx <- sar.outIn.approx <- ear.inOut.approx <- matrix(NA,nrow=length(x.approx),ncol=ncol(are.outIn.sar))#
#
sar.inOut.q <- apply(are.inOut.sar,1,quantile,probs=c(0,0.025,0.5,0.975,1))#
sar.outIn.q <- apply(are.outIn.sar,1,quantile,probs=c(0,0.025,0.5,0.975,1))#
ear.inOut.q <- apply(are.inOut.ear,1,quantile,probs=c(0,0.025,0.5,0.975,1))#
#
lines(sar.inOut.q[5,],spp.accum.inOut[,1])
##	fill-in some 0 for plotting on log scale#
sar.inOut.q[1,1:2] <- sar.inOut.q[2,2]#
sar.inOut.q[2,1] <- sar.inOut.q[2,2]
#
##	convenience plotting function#
source("/Users/andrewrominger/R_functions/col2hsv.R")#
qarPlot <- function(xq,y,col,add=TRUE,line=TRUE,poly=TRUE,...) {#
	if(!add) {#
		plot(xq[1,],y,type="n",...)#
	}#
	#
	if(line) {#
		lines(xq[3,],y,col=col,lwd=3)#
		lines(xq[1,],y,col=col)#
		lines(xq[5,],y,col=col)#
	}#
	#
#	lines(xq[2,],y,col=col,lwd=1)#
#	lines(xq[4,],y,col=col,lwd=1)#
	#
	if(poly) {#
		poly.col <- col2hsv(col,alpha=0.3)#
		polygon(x=c(rev(xq[5,]),xq[1,]),y=c(rev(y),y),col=poly.col,border=NA)#
	}#
}#
#
#
layout(matrix(1:4,ncol=2))#
#
plot(kids[[9]])#
#
qarPlot(pi*r.win^2 - sar.inOut.q,nspp-spp.accum.inOut[,1],col="blue",add=FALSE,line=FALSE,#
		xlab="Area",ylab="Species",xlim=c(0.0001,0.8),log="xy")#
qarPlot(pi*r.win^2 - sar.outIn.q,nspp-spp.accum.outIn[,1],col="red",line=FALSE)#
qarPlot(ear.inOut.q,spp.accum.inOut[,1],col="black",line=FALSE)#
qarPlot(pi*r.win^2 - sar.inOut.q,nspp-spp.accum.inOut[,1],col="blue",poly=FALSE)#
qarPlot(pi*r.win^2 - sar.outIn.q,nspp-spp.accum.outIn[,1],col="red",poly=FALSE)#
qarPlot(ear.inOut.q,spp.accum.inOut[,1],col="black",poly=FALSE)
qarPlot(pi*r.win^2 - sar.inOut.q,nspp-spp.accum.inOut[,1],col="blue",add=FALSE,line=FALSE,#
		xlab="Area",ylab="Species",xlim=c(0.0001,0.8),log="xy")#
qarPlot(sar.outIn.q,spp.accum.outIn[,1],col="red",line=FALSE)#
qarPlot(ear.inOut.q,spp.accum.inOut[,1],col="black",line=FALSE)#
qarPlot(sar.inOut.q,spp.accum.inOut[,1],col="blue",poly=FALSE)#
qarPlot(sar.outIn.q,spp.accum.outIn[,1],col="red",poly=FALSE)#
qarPlot(ear.inOut.q,spp.accum.inOut[,1],col="black",poly=FALSE)#
#
#
qarPlot(sar.inOut.q,spp.accum.inOut[,1],col="blue",add=FALSE,line=FALSE,#
		xlab="Area",ylab="Species",xlim=c(0.0001,0.8),log="xy")#
qarPlot(sar.outIn.q,spp.accum.outIn[,1],col="red",line=FALSE)#
qarPlot(ear.inOut.q,spp.accum.inOut[,1],col="black",line=FALSE)#
qarPlot(sar.inOut.q,spp.accum.inOut[,1],col="blue",poly=FALSE)#
qarPlot(sar.outIn.q,spp.accum.outIn[,1],col="red",poly=FALSE)#
qarPlot(ear.inOut.q,spp.accum.inOut[,1],col="black",poly=FALSE)
plot(are.inOut.sar,spp.accum.inOut,log="xy",col=hsv(0.7,1,1,alpha=0.4),pch=16)#
points(are.outIn.sar,spp.accum.outIn,col=hsv(1.0,1,1,alpha=0.4),pch=16)#
points(are.inOut.ear,spp.accum.inOut,col=hsv(0,1,0,alpha=0.4),pch=16)#
#
legend("topleft",legend=c("in-to-out SAR","out-to-in SAR","in-to-out EAR"),#
	   col=hsv(h=c(0.7,1,0),v=c(1,1,0)),pch=16)
factorial(5)
5^5
5^-5
1/3125
(5^-5)^2
dbinom(2,1000,(5^-5)^2)
dbinom(2,1000,(5^-5)^2)*999
dbinom(1,1000,(5^-5)^2)*999
dbinom(0,1000,(5^-5)^2)*999
dbinom(0,1000,(5^-5)^2)
dbinom(0,1000,(5^-5)^2)*1000
dbinom(2,1000,(5^-5)^2)*1000
dbinom(1,1000,(5^-5)^2)*1000
dbinom(1,1000,(10^-10))*1000
choose(5,1)
choose(5,1)*(1/3125)^5
dbinom(0,1000,choose(5,1)*(1/3125)^5)
dbinom(0:10,1000,choose(5,1)*(1/3125)^5)
sum(dbinom(0:10,1000,choose(5,1)*(1/3125)^5))
sum(dbinom(0:10,1000,choose(5,2)*(1/3125)^5))
choose(5,2)*(1/3125)^5)
choose(5,2)*(1/3125)^5
choose(5,5)*(1/3125)^5
