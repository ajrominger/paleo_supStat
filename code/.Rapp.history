setwd("~/Research/hawaiiDimensions/gis")#
require(raster)#
f <- raster("Clip_RASTERCAO1.tif")#
plot(f)#
### from raster help#
# You can use cellStats if you want to obtain a summary for #
# all cells of a single Raster* object. You can use freq to make a #
# frequency table, or to count the number of cells with a specified value.#
## summary plots and calculations on cells in raster#
freq(f, digits=1, value=NULL, useNA='ifany', progress='')#
hist(f)
plot(f)
hist(f)
plot(f)
cellStats(f, 'max')
rm(list=ls())
if(!exists("makePlot")) makePlot <- TRUE#
oldwd <- setwd('~/Desktop/Research/paleo_supStat')#
#
##  convenience function to produce a matrix of time by ord with cells#
##  of corrected diversity#
source('code/pbdb_3t_pub.R')
source("~/R_functions/paleoPlot.R")#
source("~/R_functions/samp2site_spp.R")#
source("~/R_functions/logPlot.R")#
source("~/R_functions/my_ecdf.R")#
source("code/sstat_comp.R")#
source('code/sstat_methods.R')
setwd("data/pbdb_2013-05-28")#
#
##	raw occurence data#
pbdb.dat <- read.csv("marInv-occs.csv")
pbdb.dat <- pbdb.dat[pbdb.dat$collections.10_my_bin != "",]#
#
##	get rid of bad taxonomy#
pbdb.dat <- pbdb.dat[pbdb.dat$occurrences.order_name != "",]#
#
##	drop missing levels#
pbdb.dat$collections.10_my_bin <- as.factor(as.character(pbdb.dat$collections.10_my_bin))#
pbdb.dat$occurrences.order_name <- as.factor(as.character(pbdb.dat$occurrences.order_name))#
pbdb.dat$occurrences.genus_name <- as.factor(as.character(pbdb.dat$occurrences.genus_name))#
pbdb.dat$collections.reference_no <- as.factor(as.character(pbdb.dat$collections.reference_no))#
pbdb.dat$collection_no <- as.factor(as.character(pbdb.dat$collection_no))#
##	subsampled diversity (for comparison's sake)#
pbdb.samp <- read.csv("subsampled_curve_data.csv")#
#
##	raw diversity curve (for 3 timer stat, etc)#
pbdb.curv <- read.csv("raw_curve_data.csv")
get bin times#
pbdb.time <- pbdb.samp$Midpoint.Ma#
names(pbdb.time) <- pbdb.samp$Bin.name#
pbdb.time <- pbdb.time[levels(pbdb.samp$Bin.name)]#
#
##  data.frame of publication, diversity and 3T stat#
ord.tbin.bias <- aggregate(list(div=pbdb.dat$occurrences.genus_name),#
						   list(ord=pbdb.dat$occurrences.order_name,#
						   		tbin=pbdb.dat$collections.10_my_bin),#
						   function(x) length(unique(x)))#
#
ord.tbin.bias$T3.stat <- pbdb.curv$Three.timer.sampling.stat[match(ord.tbin.bias$tbin,pbdb.curv$Bin.name)]#
ord.tbin.bias$T3.div <- ord.tbin.bias$div/ord.tbin.bias$T3.stat#
head(ord.tbin.bias)#
#
##	record pubs per tbin#
tbin.pub <- tapply(pbdb.dat$collections.reference_no,pbdb.dat$collections.10_my_bin,function(x) length(unique(x)))#
ord.tbin.bias$tbin.pub <- tbin.pub[ord.tbin.bias$tbin]
setwd('../../code')#
## makes `figSupp_divByPubOrd.pdf'#
#
##	calculate corrected diversity#
if(makePlot) {#
	source('sstat_plotting_par.R')#
	with(plot.pars, {#
		quartz(width=width,height=height)#
		par(mar=mar,mgp=mgp)#
	})#
}
pbdb.ord.div <- with(ord.tbin.bias,#
	pbdb.3t.pub(div,T3.stat,tbin.pub,ord,tbin,pbdb.time,min.pub=10,plotit=makePlot)#
)#
rownames(pbdb.ord.div)#
#
##	function `pbdb.3t.pub' modified to save regression to global env#
pbdb.pub.lm#
#
##	using correction on genus occurances#
pbdb.gen.occ <- with(pbdb.dat,samp2site.spp(collections.10_my_bin,occurrences.genus_name,rep(1,nrow(pbdb.dat))))#
pbdb.gen.occ <- pbdb.gen.occ[rownames(pbdb.ord.div),]#
pbdb.gen.occ <- pbdb.gen.occ[,colSums(pbdb.gen.occ) > 0]#
pbdb.gen.occ <- 1*(pbdb.gen.occ > 0)#
#
# # fill-in Lazzarous taxa...might not be best idea#
# pbdb.gen.occ <- apply(pbdb.gen.occ,2,function(x) {#
	# occInd <- which(x > 0)#
	# x[min(occInd):max(occInd)] <- 1#
	# return(x)#
# })#
#
##  data.frame for predicting from pbdb.pub.lm#
pub.data <- with(ord.tbin.bias,data.frame(log(tbin.pub[match(rownames(pbdb.gen.occ),tbin)])))#
rownames(pub.data) <- NULL#
colnames(pub.data) <- names(pbdb.pub.lm$coeff)[2]#
#
##  corrected genus-level data#
pbdb.gen.occ3TP <- pbdb.gen.occ / pbdb.curv$Three.timer.sampling.stat[match(rownames(pbdb.gen.occ),pbdb.curv$Bin.name)]#
pbdb.gen.occ3TP <- pbdb.gen.occ3TP * exp(-predict(pbdb.pub.lm,newdata=pub.data))#
#
# gen2ord <- as.character(with(pbdb.dat,#
	# occurrences.order_name[match(colnames(pbdb.gen.occ3TP),occurrences.genus_name)]))#
##  data.frame of different diversity measures#
pbdb.div <- aggregate(list(raw=pbdb.dat$occurrences.genus_name),#
					   list(tbin=pbdb.dat$collections.10_my_bin),#
					   function(x) length(unique(x)))#
pbdb.div$time <- pbdb.time[as.character(pbdb.div$tbin)]#
#
pbdb.div$sqs <- pbdb.samp[match(pbdb.div$tbin,pbdb.samp$Bin.name), "Mean.sampled.diversity"]#
#
pbdb.div$pub3t <- rowSums(pbdb.ord.div)[match(pbdb.div$tbin,rownames(pbdb.ord.div))]#
#
pbdb.div <- pbdb.div[order(pbdb.div$time, decreasing=TRUE),]
pbdb.ord.flux.log <- apply(pbdb.ord.div,2,function(x)#
							{#
								raw.flux <- diff(log(x))#
								return(raw.flux[raw.flux != 0])#
							})
pbdb.ord.flux.log[[1]]
pbdb.ord.flux.log[[2]]
pbdb.ord.flux.log[[3]]
pbdb.ord.flux.log
pbdb.ord.flux <- apply(pbdb.ord.div,2,function(x)#
							{#
								raw.flux <- diff(c(0,x))#
								return(raw.flux[raw.flux != 0])#
							})
pbdb.ord.flux
pbdb.ord.flux.log <- apply(pbdb.ord.div,2,function(x)#
							{#
								raw.flux <- diff(log(x))#
								bad <- is.na(raw.flux) | !is.finite(raw.flux)#
								return(raw.flux[!bad])#
							})
pbdb.ord.flux.log
pbdb.sstat.ord.log <- sstat.comp(pbdb.ord.flux.log,minN=10,plotit=makePlot)
names(pbdb.sstat.ord.log)
pbdb.sstat.ord.log$beta
plot(density(pbdb.sstat.ord.log$beta))
plot(density(pbdb.sstat.ord.log$beta),log='x')
plot(density(log(pbdb.sstat.ord.log$beta)))
plot(my.ecdf(log(pbdb.sstat.ord.log$beta)))
plot(my.ecdf(scale(log(pbdb.sstat.ord.log$beta))))
curve(pnorm(x),add=TRUE)
plot(my.ecdf(pbdb.sstat.ord.log$beta))
plot(my.ecdf(pbdb.sstat.ord.log$beta),log='x')
names(pbdb.sstat.ord.log)
with(pbdb.sstat.ord.log, curve(pgamma(x,gam.par[1],gam.par[2]),add=TRUE))
plot(my.ecdf(pbdb.sstat.ord.log$beta),log='x')
with(pbdb.sstat.ord.log, curve(pgamma(x,gam.par[1],gam.par[2]),add=TRUE),col='red')
with(pbdb.sstat.ord.log, curve(pgamma(x,gam.par[1],gam.par[2]),add=TRUE,col='red'))
library(MASS)
?fitdistr
with(pbdb.sstat.ord.log, fitdistr(beta,'lognormal'))
lnorm.par <- with(pbdb.sstat.ord.log, fitdistr(beta,'lognormal'))
curve(plnorm(x,lnorm.par[1],lnorm.par[2]),add=TRUE,col='blue')
lnorm.par[1]
with(lnorm.par, curve(plnorm(x,estimate[1],estimate[2]),add=TRUE,col='blue'))
plot(my.ecdf(pbdb.sstat.ord.log$beta),log='x')#
with(pbdb.sstat.ord.log, curve(pgamma(x,gam.par[1],gam.par[2]),add=TRUE,col='red'))#
#
lnorm.par <- with(pbdb.sstat.ord.log, fitdistr(beta,'lognormal'))#
with(lnorm.par, curve(plnorm(x,estimate[1],estimate[2]),add=TRUE,col='blue'))
chi.sq.par <- with(pbdb.sstat.ord.log, fitdistr(beta,'chi-squared',start=1))
chisq.par <- with(pbdb.sstat.ord.log, fitdistr(beta,'chi-squared',start=list(df=1)))
chisq.par
curve(plnorm(x,chisq.par$estimate[1]),add=TRUE,col='goldenrod3')
curve(pchisq(x,chisq.par$estimate[1]),add=TRUE,col='goldenrod3')
chisq.par <- with(pbdb.sstat.ord.log, fitdistr(beta,'chi-squared',start=list(df=1,ncp=1)))
chisq.par
with(chisq.par, curve(pchisq(x,estimate[1],estimate[2]),add=TRUE,col='goldenrod3'))
plot(my.ecdf(pbdb.sstat.ord.log$beta),log='x')#
with(pbdb.sstat.ord.log, curve(pgamma(x,gam.par[1],gam.par[2]),add=TRUE,col='red'))#
#
lnorm.par <- with(pbdb.sstat.ord.log, fitdistr(beta,'lognormal'))#
with(lnorm.par, curve(plnorm(x,estimate[1],estimate[2]),add=TRUE,col='blue'))#
#
chisq.par <- with(pbdb.sstat.ord.log, fitdistr(beta,'chi-squared',start=list(df=1,ncp=1))) #
with(chisq.par, curve(pchisq(x,estimate[1],estimate[2]),add=TRUE,col='goldenrod3'))
?integrate
with(lnorm.par,integrate(Vectorize(Px.lnorm.prm),lower=0,upper=Inf,x=1,logm=estimate[1],logsd=estimate[2]))
Px.lnorm.prm <- function(b,x,logm,logsd) {#
	dnorm(x,sd=b^-0.5)*dlnorm(b,logm,logsd)#
}
with(lnorm.par,integrate(Vectorize(Px.lnorm.prm),lower=0,upper=Inf,x=1,logm=estimate[1],logsd=estimate[2]))
with(lnorm.par,integrate(Vectorize(Px.lnorm.prm),lower=0,upper=Inf,x=1:2,logm=estimate[1],logsd=estimate[2]))
sapply(seq(0.2,20,length=50), function(x) {#
	with(lnorm.par,integrate(Vectorize(Px.lnorm.prm),lower=0,upper=Inf,x=x,logm=estimate[1],logsd=estimate[2]))#
})
x <- 1
bla <- with(lnorm.par,integrate(Vectorize(Px.lnorm.prm),lower=0,upper=Inf,x=x,logm=estimate[1],logsd=estimate[2]))
bla
names(bla)
bla$value
rm(x,bla)
sapply(seq(0.2,20,length=50), function(x) {#
	with(lnorm.par,integrate(Vectorize(Px.lnorm.prm),lower=0,upper=Inf,x=x,logm=estimate[1],logsd=estimate[2]))$value#
})
sapply(seq(-20,20,length=50), function(x) {#
	with(lnorm.par,integrate(Vectorize(Px.lnorm.prm),lower=0,upper=Inf,x=x,logm=estimate[1],logsd=estimate[2]))$value#
})
Px.lnorm <- sapply(seq(-20,20,length=50), function(x) {#
	with(lnorm.par,integrate(Vectorize(Px.lnorm.prm),lower=0,upper=Inf,x=x,logm=estimate[1],logsd=estimate[2]))$value#
})
plot(Px.lnorm)
Px.lnorm <- sapply(seq(-20,20,length=500), function(x) {#
	with(lnorm.par,integrate(Vectorize(Px.lnorm.prm),lower=0,upper=Inf,x=x,logm=estimate[1],logsd=estimate[2]))$value#
})
plot(Px.lnorm)
